
Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800100  000009b4  00000a48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000066  0080016c  0080016c  00000ab4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ab4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ae4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017a8  00000000  00000000  00000c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b7  00000000  00000000  0000240c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e43  00000000  00000000  00002bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e4  00000000  00000000  00003a08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047e  00000000  00000000  00003cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cf4  00000000  00000000  0000416a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00004e5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 48 03 	jmp	0x690	; 0x690 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 2d 03 	jmp	0x65a	; 0x65a <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 eb       	ldi	r30, 0xB4	; 180
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 36       	cpi	r26, 0x6C	; 108
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e6       	ldi	r26, 0x6C	; 108
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 3d       	cpi	r26, 0xD2	; 210
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <main>
  9e:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  a6:	59 9a       	sbi	0x0b, 1	; 11
  a8:	00 00       	nop
  aa:	59 98       	cbi	0x0b, 1	; 11
  ac:	08 95       	ret

000000ae <lcd_write>:
  ae:	cf 93       	push	r28
  b0:	c8 2f       	mov	r28, r24
  b2:	66 23       	and	r22, r22
  b4:	11 f0       	breq	.+4      	; 0xba <lcd_write+0xc>
  b6:	58 9a       	sbi	0x0b, 0	; 11
  b8:	01 c0       	rjmp	.+2      	; 0xbc <lcd_write+0xe>
  ba:	58 98       	cbi	0x0b, 0	; 11
  bc:	5f 98       	cbi	0x0b, 7	; 11
  be:	52 9a       	sbi	0x0a, 2	; 10
  c0:	53 9a       	sbi	0x0a, 3	; 10
  c2:	54 9a       	sbi	0x0a, 4	; 10
  c4:	55 9a       	sbi	0x0a, 5	; 10
  c6:	5d 98       	cbi	0x0b, 5	; 11
  c8:	5c 98       	cbi	0x0b, 4	; 11
  ca:	5b 98       	cbi	0x0b, 3	; 11
  cc:	5a 98       	cbi	0x0b, 2	; 11
  ce:	cc 23       	and	r28, r28
  d0:	0c f4       	brge	.+2      	; 0xd4 <lcd_write+0x26>
  d2:	5d 9a       	sbi	0x0b, 5	; 11
  d4:	c6 fd       	sbrc	r28, 6
  d6:	5c 9a       	sbi	0x0b, 4	; 11
  d8:	c5 fd       	sbrc	r28, 5
  da:	5b 9a       	sbi	0x0b, 3	; 11
  dc:	c4 fd       	sbrc	r28, 4
  de:	5a 9a       	sbi	0x0b, 2	; 11
  e0:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e4:	5d 98       	cbi	0x0b, 5	; 11
  e6:	5c 98       	cbi	0x0b, 4	; 11
  e8:	5b 98       	cbi	0x0b, 3	; 11
  ea:	5a 98       	cbi	0x0b, 2	; 11
  ec:	c3 fd       	sbrc	r28, 3
  ee:	5d 9a       	sbi	0x0b, 5	; 11
  f0:	c2 fd       	sbrc	r28, 2
  f2:	5c 9a       	sbi	0x0b, 4	; 11
  f4:	c1 fd       	sbrc	r28, 1
  f6:	5b 9a       	sbi	0x0b, 3	; 11
  f8:	c0 fd       	sbrc	r28, 0
  fa:	5a 9a       	sbi	0x0b, 2	; 11
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 100:	5a 9a       	sbi	0x0b, 2	; 11
 102:	5b 9a       	sbi	0x0b, 3	; 11
 104:	5c 9a       	sbi	0x0b, 4	; 11
 106:	5d 9a       	sbi	0x0b, 5	; 11
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <lcd_read>:
 10c:	88 23       	and	r24, r24
 10e:	11 f0       	breq	.+4      	; 0x114 <lcd_read+0x8>
 110:	58 9a       	sbi	0x0b, 0	; 11
 112:	01 c0       	rjmp	.+2      	; 0x116 <lcd_read+0xa>
 114:	58 98       	cbi	0x0b, 0	; 11
 116:	5f 9a       	sbi	0x0b, 7	; 11
 118:	52 98       	cbi	0x0a, 2	; 10
 11a:	53 98       	cbi	0x0a, 3	; 10
 11c:	54 98       	cbi	0x0a, 4	; 10
 11e:	55 98       	cbi	0x0a, 5	; 10
 120:	59 9a       	sbi	0x0b, 1	; 11
 122:	00 00       	nop
 124:	4a 9b       	sbis	0x09, 2	; 9
 126:	02 c0       	rjmp	.+4      	; 0x12c <lcd_read+0x20>
 128:	80 e1       	ldi	r24, 0x10	; 16
 12a:	01 c0       	rjmp	.+2      	; 0x12e <lcd_read+0x22>
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	4b 99       	sbic	0x09, 3	; 9
 130:	80 62       	ori	r24, 0x20	; 32
 132:	4c 99       	sbic	0x09, 4	; 9
 134:	80 64       	ori	r24, 0x40	; 64
 136:	4d 99       	sbic	0x09, 5	; 9
 138:	80 68       	ori	r24, 0x80	; 128
 13a:	59 98       	cbi	0x0b, 1	; 11
 13c:	00 00       	nop
 13e:	59 9a       	sbi	0x0b, 1	; 11
 140:	00 00       	nop
 142:	4a 99       	sbic	0x09, 2	; 9
 144:	81 60       	ori	r24, 0x01	; 1
 146:	4b 99       	sbic	0x09, 3	; 9
 148:	82 60       	ori	r24, 0x02	; 2
 14a:	4c 99       	sbic	0x09, 4	; 9
 14c:	84 60       	ori	r24, 0x04	; 4
 14e:	4d 99       	sbic	0x09, 5	; 9
 150:	88 60       	ori	r24, 0x08	; 8
 152:	59 98       	cbi	0x0b, 1	; 11
 154:	08 95       	ret

00000156 <lcd_waitbusy>:
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_read>
 15c:	88 23       	and	r24, r24
 15e:	dc f3       	brlt	.-10     	; 0x156 <lcd_waitbusy>
 160:	00 c0       	rjmp	.+0      	; 0x162 <lcd_waitbusy+0xc>
 162:	00 c0       	rjmp	.+0      	; 0x164 <lcd_waitbusy+0xe>
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_read>
 16a:	08 95       	ret

0000016c <lcd_command>:
 16c:	cf 93       	push	r28
 16e:	c8 2f       	mov	r28, r24
 170:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_waitbusy>
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	8c 2f       	mov	r24, r28
 178:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <lcd_gotoxy>:
 180:	61 11       	cpse	r22, r1
 182:	04 c0       	rjmp	.+8      	; 0x18c <lcd_gotoxy+0xc>
 184:	80 58       	subi	r24, 0x80	; 128
 186:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
 18a:	08 95       	ret
 18c:	80 54       	subi	r24, 0x40	; 64
 18e:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
 192:	08 95       	ret

00000194 <lcd_clrscr>:
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
 19a:	08 95       	ret

0000019c <lcd_home>:
 19c:	82 e0       	ldi	r24, 0x02	; 2
 19e:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
 1a2:	08 95       	ret

000001a4 <lcd_putc>:
 1a4:	cf 93       	push	r28
 1a6:	c8 2f       	mov	r28, r24
 1a8:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_waitbusy>
 1ac:	ca 30       	cpi	r28, 0x0A	; 10
 1ae:	49 f4       	brne	.+18     	; 0x1c2 <lcd_putc+0x1e>
 1b0:	80 34       	cpi	r24, 0x40	; 64
 1b2:	10 f0       	brcs	.+4      	; 0x1b8 <lcd_putc+0x14>
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <lcd_putc+0x16>
 1b8:	80 e4       	ldi	r24, 0x40	; 64
 1ba:	80 58       	subi	r24, 0x80	; 128
 1bc:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
 1c0:	04 c0       	rjmp	.+8      	; 0x1ca <lcd_putc+0x26>
 1c2:	61 e0       	ldi	r22, 0x01	; 1
 1c4:	8c 2f       	mov	r24, r28
 1c6:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <lcd_puts>:
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	ec 01       	movw	r28, r24
 1d4:	21 96       	adiw	r28, 0x01	; 1
 1d6:	fc 01       	movw	r30, r24
 1d8:	80 81       	ld	r24, Z
 1da:	88 23       	and	r24, r24
 1dc:	29 f0       	breq	.+10     	; 0x1e8 <lcd_puts+0x1a>
 1de:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_putc>
 1e2:	89 91       	ld	r24, Y+
 1e4:	81 11       	cpse	r24, r1
 1e6:	fb cf       	rjmp	.-10     	; 0x1de <lcd_puts+0x10>
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1ee:	cf 93       	push	r28
 1f0:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1f2:	50 9a       	sbi	0x0a, 0	; 10
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1f4:	57 9a       	sbi	0x0a, 7	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1f6:	51 9a       	sbi	0x0a, 1	; 10
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1f8:	52 9a       	sbi	0x0a, 2	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 1fa:	53 9a       	sbi	0x0a, 3	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 1fc:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 1fe:	55 9a       	sbi	0x0a, 5	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 200:	8f e9       	ldi	r24, 0x9F	; 159
 202:	9f e0       	ldi	r25, 0x0F	; 15
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <lcd_init+0x16>
 208:	00 c0       	rjmp	.+0      	; 0x20a <lcd_init+0x1c>
 20a:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 20c:	5b 9a       	sbi	0x0b, 3	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 20e:	5a 9a       	sbi	0x0b, 2	; 11
    lcd_e_toggle();
 210:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 214:	81 ee       	ldi	r24, 0xE1	; 225
 216:	94 e0       	ldi	r25, 0x04	; 4
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <lcd_init+0x2a>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <lcd_init+0x30>
 21e:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 220:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 224:	95 e1       	ldi	r25, 0x15	; 21
 226:	9a 95       	dec	r25
 228:	f1 f7       	brne	.-4      	; 0x226 <lcd_init+0x38>
 22a:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 22c:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 230:	85 e1       	ldi	r24, 0x15	; 21
 232:	8a 95       	dec	r24
 234:	f1 f7       	brne	.-4      	; 0x232 <lcd_init+0x44>
 236:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 238:	5a 98       	cbi	0x0b, 2	; 11
    lcd_e_toggle();
 23a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 23e:	95 e1       	ldi	r25, 0x15	; 21
 240:	9a 95       	dec	r25
 242:	f1 f7       	brne	.-4      	; 0x240 <lcd_init+0x52>
 244:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 246:	88 e2       	ldi	r24, 0x28	; 40
 248:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 24c:	88 e0       	ldi	r24, 0x08	; 8
 24e:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 252:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 256:	86 e0       	ldi	r24, 0x06	; 6
 258:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 25c:	8c 2f       	mov	r24, r28
 25e:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>

}/* lcd_init */
 262:	cf 91       	pop	r28
 264:	08 95       	ret

00000266 <update_led>:
    }
    return 0;
}

void update_led(void){
    PORTB = date.day;
 266:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <date+0x30>
 26a:	85 b9       	out	0x05, r24	; 5
 26c:	08 95       	ret

0000026e <update_time>:
}

void update_time(void){

    if ( date.sec == 0 ) {
 26e:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <date>
 272:	81 11       	cpse	r24, r1
 274:	05 c0       	rjmp	.+10     	; 0x280 <update_time+0x12>
        date.min++;
 276:	ef e6       	ldi	r30, 0x6F	; 111
 278:	f1 e0       	ldi	r31, 0x01	; 1
 27a:	80 89       	ldd	r24, Z+16	; 0x10
 27c:	8f 5f       	subi	r24, 0xFF	; 255
 27e:	80 8b       	std	Z+16, r24	; 0x10
    }
    if ( date.min == 60 ) {
 280:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <date+0x10>
 284:	8c 33       	cpi	r24, 0x3C	; 60
 286:	31 f4       	brne	.+12     	; 0x294 <update_time+0x26>
        date.min = 0;
 288:	ef e6       	ldi	r30, 0x6F	; 111
 28a:	f1 e0       	ldi	r31, 0x01	; 1
 28c:	10 8a       	std	Z+16, r1	; 0x10
        date.hour++;
 28e:	80 a1       	ldd	r24, Z+32	; 0x20
 290:	8f 5f       	subi	r24, 0xFF	; 255
 292:	80 a3       	std	Z+32, r24	; 0x20
    }
    if ( date.hour == 24 ) {
 294:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <date+0x20>
 298:	88 31       	cpi	r24, 0x18	; 24
 29a:	31 f4       	brne	.+12     	; 0x2a8 <update_time+0x3a>
        date.hour = 0;
 29c:	ef e6       	ldi	r30, 0x6F	; 111
 29e:	f1 e0       	ldi	r31, 0x01	; 1
 2a0:	10 a2       	std	Z+32, r1	; 0x20
        date.day++;
 2a2:	80 a9       	ldd	r24, Z+48	; 0x30
 2a4:	8f 5f       	subi	r24, 0xFF	; 255
 2a6:	80 ab       	std	Z+48, r24	; 0x30
    }
    if ( date.day >= 31 || date.month != 12) {
 2a8:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <date+0x30>
 2ac:	8f 31       	cpi	r24, 0x1F	; 31
 2ae:	20 f4       	brcc	.+8      	; 0x2b8 <update_time+0x4a>
 2b0:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <date+0x40>
 2b4:	8c 30       	cpi	r24, 0x0C	; 12
 2b6:	49 f0       	breq	.+18     	; 0x2ca <update_time+0x5c>
        lcd_clrscr();
 2b8:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_clrscr>
        lcd_home();
 2bc:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_home>
        lcd_puts("APOCALYPSE!!");
 2c0:	82 e2       	ldi	r24, 0x22	; 34
 2c2:	91 e0       	ldi	r25, 0x01	; 1
 2c4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
        while(1);
 2c8:	ff cf       	rjmp	.-2      	; 0x2c8 <update_time+0x5a>
 2ca:	08 95       	ret

000002cc <update_display>:
    }
    update_display(MODE_SETUP, ch);
    return 1;
}

void update_display(uint8_t mode, char ch){
 2cc:	ef 92       	push	r14
 2ce:	ff 92       	push	r15
 2d0:	0f 93       	push	r16
 2d2:	1f 93       	push	r17
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	cd b7       	in	r28, 0x3d	; 61
 2da:	de b7       	in	r29, 0x3e	; 62
 2dc:	a0 97       	sbiw	r28, 0x20	; 32
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	f8 94       	cli
 2e2:	de bf       	out	0x3e, r29	; 62
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	cd bf       	out	0x3d, r28	; 61
 2e8:	f8 2e       	mov	r15, r24
 2ea:	e6 2e       	mov	r14, r22

    itoa(date.sec, date.sec_array, 10);
 2ec:	0f e6       	ldi	r16, 0x6F	; 111
 2ee:	11 e0       	ldi	r17, 0x01	; 1
 2f0:	f8 01       	movw	r30, r16
 2f2:	80 81       	ld	r24, Z
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2f4:	4a e0       	ldi	r20, 0x0A	; 10
 2f6:	60 e7       	ldi	r22, 0x70	; 112
 2f8:	71 e0       	ldi	r23, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 a3 04 	call	0x946	; 0x946 <__itoa_ncheck>
    itoa(date.min, date.min_array, 10);
 300:	f8 01       	movw	r30, r16
 302:	80 89       	ldd	r24, Z+16	; 0x10
 304:	4a e0       	ldi	r20, 0x0A	; 10
 306:	60 e8       	ldi	r22, 0x80	; 128
 308:	71 e0       	ldi	r23, 0x01	; 1
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 a3 04 	call	0x946	; 0x946 <__itoa_ncheck>
    itoa(date.hour, date.hour_array, 10);
 310:	f8 01       	movw	r30, r16
 312:	80 a1       	ldd	r24, Z+32	; 0x20
 314:	4a e0       	ldi	r20, 0x0A	; 10
 316:	60 e9       	ldi	r22, 0x90	; 144
 318:	71 e0       	ldi	r23, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 a3 04 	call	0x946	; 0x946 <__itoa_ncheck>
    itoa(date.day, date.day_array, 10);
 320:	f8 01       	movw	r30, r16
 322:	80 a9       	ldd	r24, Z+48	; 0x30
 324:	4a e0       	ldi	r20, 0x0A	; 10
 326:	60 ea       	ldi	r22, 0xA0	; 160
 328:	71 e0       	ldi	r23, 0x01	; 1
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 a3 04 	call	0x946	; 0x946 <__itoa_ncheck>
    itoa(date.month, date.month_array, 10);
 330:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <date+0x40>
 334:	4a e0       	ldi	r20, 0x0A	; 10
 336:	60 eb       	ldi	r22, 0xB0	; 176
 338:	71 e0       	ldi	r23, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 a3 04 	call	0x946	; 0x946 <__itoa_ncheck>
 340:	4a e0       	ldi	r20, 0x0A	; 10
 342:	61 ec       	ldi	r22, 0xC1	; 193
 344:	71 e0       	ldi	r23, 0x01	; 1
 346:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <date+0x50>
 34a:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <date+0x51>
 34e:	0e 94 a3 04 	call	0x946	; 0x946 <__itoa_ncheck>
    itoa(date.year, date.year_array, 10);


    char row1[16] = "DATE: 2016/12/01";
 352:	90 e1       	ldi	r25, 0x10	; 16
 354:	e0 e0       	ldi	r30, 0x00	; 0
 356:	f1 e0       	ldi	r31, 0x01	; 1
 358:	de 01       	movw	r26, r28
 35a:	11 96       	adiw	r26, 0x01	; 1
 35c:	01 90       	ld	r0, Z+
 35e:	0d 92       	st	X+, r0
 360:	9a 95       	dec	r25
 362:	e1 f7       	brne	.-8      	; 0x35c <update_display+0x90>
    char row2[16] = "Time: 12:00:00  ";
 364:	90 e1       	ldi	r25, 0x10	; 16
 366:	e1 e1       	ldi	r30, 0x11	; 17
 368:	f1 e0       	ldi	r31, 0x01	; 1
 36a:	de 01       	movw	r26, r28
 36c:	51 96       	adiw	r26, 0x11	; 17
 36e:	01 90       	ld	r0, Z+
 370:	0d 92       	st	X+, r0
 372:	9a 95       	dec	r25
 374:	e1 f7       	brne	.-8      	; 0x36e <update_display+0xa2>

    uint8_t i;

    for (i = 0; i < 4; i++) row1[6+i] = date.year_array[i];
 376:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <date+0x52>
 37a:	8f 83       	std	Y+7, r24	; 0x07
 37c:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <date+0x53>
 380:	88 87       	std	Y+8, r24	; 0x08
 382:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <date+0x54>
 386:	89 87       	std	Y+9, r24	; 0x09
 388:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <date+0x55>
 38c:	8a 87       	std	Y+10, r24	; 0x0a
    for (i = 0; i < 2; i++) row1[11+i] = date.month_array[i];
 38e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <date+0x41>
 392:	8c 87       	std	Y+12, r24	; 0x0c
 394:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <date+0x42>
 398:	8d 87       	std	Y+13, r24	; 0x0d
    if(date.day < 10){
 39a:	f8 01       	movw	r30, r16
 39c:	80 a9       	ldd	r24, Z+48	; 0x30
 39e:	8a 30       	cpi	r24, 0x0A	; 10
 3a0:	68 f5       	brcc	.+90     	; 0x3fc <update_display+0x130>
        row1[14] = '0';
 3a2:	80 e3       	ldi	r24, 0x30	; 48
 3a4:	8f 87       	std	Y+15, r24	; 0x0f
        row1[15] = date.day_array[0];
 3a6:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <date+0x31>
 3aa:	88 8b       	std	Y+16, r24	; 0x10
 3ac:	2d c0       	rjmp	.+90     	; 0x408 <__FUSE_REGION_LENGTH__+0x8>
    } else {
        for (i = 0; i < 2; i++) row1[14+i] = date.day_array[i];
    }
    
    if(date.hour < 10){
        row2[6] = '0';
 3ae:	80 e3       	ldi	r24, 0x30	; 48
 3b0:	8f 8b       	std	Y+23, r24	; 0x17
        row2[7] = date.hour_array [0];
 3b2:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <date+0x21>
 3b6:	88 8f       	std	Y+24, r24	; 0x18
 3b8:	31 c0       	rjmp	.+98     	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
    } else {
        for (i = 0; i < 2; i++) row2[6+i] = date.hour_array [i];
    }

    if(date.min < 10){
        row2[9] = '0';
 3ba:	80 e3       	ldi	r24, 0x30	; 48
 3bc:	8a 8f       	std	Y+26, r24	; 0x1a
        row2[10] = date.min_array[0];
 3be:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <date+0x11>
 3c2:	8b 8f       	std	Y+27, r24	; 0x1b
 3c4:	35 c0       	rjmp	.+106    	; 0x430 <__FUSE_REGION_LENGTH__+0x30>
    } else {
        for (i = 0; i < 2; i++) row2[9+i] = date.min_array[i];
    }

    if(date.sec < 10){
        row2[12] = '0';
 3c6:	80 e3       	ldi	r24, 0x30	; 48
 3c8:	8d 8f       	std	Y+29, r24	; 0x1d
        row2[13] = date.sec_array[0];
 3ca:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <date+0x1>
 3ce:	8e 8f       	std	Y+30, r24	; 0x1e
    } else {
        for (i = 0; i < 2; i++) row2[12+i] = date.sec_array[i];
    }

    if(mode == MODE_SETUP){
 3d0:	f1 10       	cpse	r15, r1
 3d2:	03 c0       	rjmp	.+6      	; 0x3da <update_display+0x10e>
        row2[14] = '*';
 3d4:	8a e2       	ldi	r24, 0x2A	; 42
 3d6:	8f 8f       	std	Y+31, r24	; 0x1f
        row2[15] = ch;
 3d8:	e8 a2       	std	Y+32, r14	; 0x20
    }

    lcd_gotoxy(0, 0);
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_gotoxy>
    lcd_puts(row1);
 3e2:	ce 01       	movw	r24, r28
 3e4:	01 96       	adiw	r24, 0x01	; 1
 3e6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>

    lcd_gotoxy(0, 1);
 3ea:	61 e0       	ldi	r22, 0x01	; 1
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_gotoxy>
    lcd_puts(row2);
 3f2:	ce 01       	movw	r24, r28
 3f4:	41 96       	adiw	r24, 0x11	; 17
 3f6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
 3fa:	25 c0       	rjmp	.+74     	; 0x446 <__FUSE_REGION_LENGTH__+0x46>
    for (i = 0; i < 2; i++) row1[11+i] = date.month_array[i];
    if(date.day < 10){
        row1[14] = '0';
        row1[15] = date.day_array[0];
    } else {
        for (i = 0; i < 2; i++) row1[14+i] = date.day_array[i];
 3fc:	ef e6       	ldi	r30, 0x6F	; 111
 3fe:	f1 e0       	ldi	r31, 0x01	; 1
 400:	81 a9       	ldd	r24, Z+49	; 0x31
 402:	8f 87       	std	Y+15, r24	; 0x0f
 404:	82 a9       	ldd	r24, Z+50	; 0x32
 406:	88 8b       	std	Y+16, r24	; 0x10
    }
    
    if(date.hour < 10){
 408:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <date+0x20>
 40c:	8a 30       	cpi	r24, 0x0A	; 10
 40e:	78 f2       	brcs	.-98     	; 0x3ae <update_display+0xe2>
        row2[6] = '0';
        row2[7] = date.hour_array [0];
    } else {
        for (i = 0; i < 2; i++) row2[6+i] = date.hour_array [i];
 410:	ef e6       	ldi	r30, 0x6F	; 111
 412:	f1 e0       	ldi	r31, 0x01	; 1
 414:	81 a1       	ldd	r24, Z+33	; 0x21
 416:	8f 8b       	std	Y+23, r24	; 0x17
 418:	82 a1       	ldd	r24, Z+34	; 0x22
 41a:	88 8f       	std	Y+24, r24	; 0x18
    }

    if(date.min < 10){
 41c:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <date+0x10>
 420:	8a 30       	cpi	r24, 0x0A	; 10
 422:	58 f2       	brcs	.-106    	; 0x3ba <update_display+0xee>
        row2[9] = '0';
        row2[10] = date.min_array[0];
    } else {
        for (i = 0; i < 2; i++) row2[9+i] = date.min_array[i];
 424:	ef e6       	ldi	r30, 0x6F	; 111
 426:	f1 e0       	ldi	r31, 0x01	; 1
 428:	81 89       	ldd	r24, Z+17	; 0x11
 42a:	8a 8f       	std	Y+26, r24	; 0x1a
 42c:	82 89       	ldd	r24, Z+18	; 0x12
 42e:	8b 8f       	std	Y+27, r24	; 0x1b
    }

    if(date.sec < 10){
 430:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <date>
 434:	8a 30       	cpi	r24, 0x0A	; 10
 436:	38 f2       	brcs	.-114    	; 0x3c6 <update_display+0xfa>
        row2[12] = '0';
        row2[13] = date.sec_array[0];
    } else {
        for (i = 0; i < 2; i++) row2[12+i] = date.sec_array[i];
 438:	ef e6       	ldi	r30, 0x6F	; 111
 43a:	f1 e0       	ldi	r31, 0x01	; 1
 43c:	81 81       	ldd	r24, Z+1	; 0x01
 43e:	8d 8f       	std	Y+29, r24	; 0x1d
 440:	82 81       	ldd	r24, Z+2	; 0x02
 442:	8e 8f       	std	Y+30, r24	; 0x1e
 444:	c5 cf       	rjmp	.-118    	; 0x3d0 <update_display+0x104>
    lcd_puts(row2);

    // DATE: 2016/12/23
    // Time: 15:23:01

}
 446:	a0 96       	adiw	r28, 0x20	; 32
 448:	0f b6       	in	r0, 0x3f	; 63
 44a:	f8 94       	cli
 44c:	de bf       	out	0x3e, r29	; 62
 44e:	0f be       	out	0x3f, r0	; 63
 450:	cd bf       	out	0x3d, r28	; 61
 452:	df 91       	pop	r29
 454:	cf 91       	pop	r28
 456:	1f 91       	pop	r17
 458:	0f 91       	pop	r16
 45a:	ff 90       	pop	r15
 45c:	ef 90       	pop	r14
 45e:	08 95       	ret

00000460 <change_time>:

uint8_t change_time(uint8_t input) {
    
    char ch = 0;

    switch ( current_mode ) {
 460:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <__data_end>
 464:	93 30       	cpi	r25, 0x03	; 3
 466:	f1 f1       	breq	.+124    	; 0x4e4 <change_time+0x84>
 468:	38 f4       	brcc	.+14     	; 0x478 <change_time+0x18>
 46a:	91 30       	cpi	r25, 0x01	; 1
 46c:	09 f4       	brne	.+2      	; 0x470 <change_time+0x10>
 46e:	5a c0       	rjmp	.+180    	; 0x524 <change_time+0xc4>
 470:	92 30       	cpi	r25, 0x02	; 2
 472:	09 f4       	brne	.+2      	; 0x476 <change_time+0x16>
 474:	47 c0       	rjmp	.+142    	; 0x504 <change_time+0xa4>
 476:	6a c0       	rjmp	.+212    	; 0x54c <change_time+0xec>
 478:	95 30       	cpi	r25, 0x05	; 5
 47a:	a1 f0       	breq	.+40     	; 0x4a4 <change_time+0x44>
 47c:	18 f1       	brcs	.+70     	; 0x4c4 <change_time+0x64>
 47e:	96 30       	cpi	r25, 0x06	; 6
 480:	09 f0       	breq	.+2      	; 0x484 <change_time+0x24>
 482:	64 c0       	rjmp	.+200    	; 0x54c <change_time+0xec>
        case SECONDS:
            ch = 'S';
            if ( input == INCREASE ) {
 484:	8f 3f       	cpi	r24, 0xFF	; 255
 486:	39 f4       	brne	.+14     	; 0x496 <change_time+0x36>
                date.sec++;
 488:	ef e6       	ldi	r30, 0x6F	; 111
 48a:	f1 e0       	ldi	r31, 0x01	; 1
 48c:	80 81       	ld	r24, Z
 48e:	8f 5f       	subi	r24, 0xFF	; 255
 490:	80 83       	st	Z, r24
    
    char ch = 0;

    switch ( current_mode ) {
        case SECONDS:
            ch = 'S';
 492:	63 e5       	ldi	r22, 0x53	; 83
 494:	5c c0       	rjmp	.+184    	; 0x54e <change_time+0xee>
            if ( input == INCREASE ) {
                date.sec++;
            } else {
                date.sec--;
 496:	ef e6       	ldi	r30, 0x6F	; 111
 498:	f1 e0       	ldi	r31, 0x01	; 1
 49a:	80 81       	ld	r24, Z
 49c:	81 50       	subi	r24, 0x01	; 1
 49e:	80 83       	st	Z, r24
    
    char ch = 0;

    switch ( current_mode ) {
        case SECONDS:
            ch = 'S';
 4a0:	63 e5       	ldi	r22, 0x53	; 83
 4a2:	55 c0       	rjmp	.+170    	; 0x54e <change_time+0xee>
                date.sec--;
            }
            break;
        case MINUTE:
            ch = 'M';
            if ( input == INCREASE ) {
 4a4:	8f 3f       	cpi	r24, 0xFF	; 255
 4a6:	39 f4       	brne	.+14     	; 0x4b6 <change_time+0x56>
                date.min++;
 4a8:	ef e6       	ldi	r30, 0x6F	; 111
 4aa:	f1 e0       	ldi	r31, 0x01	; 1
 4ac:	80 89       	ldd	r24, Z+16	; 0x10
 4ae:	8f 5f       	subi	r24, 0xFF	; 255
 4b0:	80 8b       	std	Z+16, r24	; 0x10
            } else {
                date.sec--;
            }
            break;
        case MINUTE:
            ch = 'M';
 4b2:	6d e4       	ldi	r22, 0x4D	; 77
 4b4:	4c c0       	rjmp	.+152    	; 0x54e <change_time+0xee>
            if ( input == INCREASE ) {
                date.min++;
            } else {
                date.min--;
 4b6:	ef e6       	ldi	r30, 0x6F	; 111
 4b8:	f1 e0       	ldi	r31, 0x01	; 1
 4ba:	80 89       	ldd	r24, Z+16	; 0x10
 4bc:	81 50       	subi	r24, 0x01	; 1
 4be:	80 8b       	std	Z+16, r24	; 0x10
            } else {
                date.sec--;
            }
            break;
        case MINUTE:
            ch = 'M';
 4c0:	6d e4       	ldi	r22, 0x4D	; 77
 4c2:	45 c0       	rjmp	.+138    	; 0x54e <change_time+0xee>
                date.min--;
            }
            break;
        case HOUR:
            ch = 'H';
            if ( input == INCREASE ) {
 4c4:	8f 3f       	cpi	r24, 0xFF	; 255
 4c6:	39 f4       	brne	.+14     	; 0x4d6 <change_time+0x76>
                date.hour++;
 4c8:	ef e6       	ldi	r30, 0x6F	; 111
 4ca:	f1 e0       	ldi	r31, 0x01	; 1
 4cc:	80 a1       	ldd	r24, Z+32	; 0x20
 4ce:	8f 5f       	subi	r24, 0xFF	; 255
 4d0:	80 a3       	std	Z+32, r24	; 0x20
            } else {
                date.min--;
            }
            break;
        case HOUR:
            ch = 'H';
 4d2:	68 e4       	ldi	r22, 0x48	; 72
 4d4:	3c c0       	rjmp	.+120    	; 0x54e <change_time+0xee>
            if ( input == INCREASE ) {
                date.hour++;
            } else {
                date.hour--;
 4d6:	ef e6       	ldi	r30, 0x6F	; 111
 4d8:	f1 e0       	ldi	r31, 0x01	; 1
 4da:	80 a1       	ldd	r24, Z+32	; 0x20
 4dc:	81 50       	subi	r24, 0x01	; 1
 4de:	80 a3       	std	Z+32, r24	; 0x20
            } else {
                date.min--;
            }
            break;
        case HOUR:
            ch = 'H';
 4e0:	68 e4       	ldi	r22, 0x48	; 72
 4e2:	35 c0       	rjmp	.+106    	; 0x54e <change_time+0xee>
                date.hour--;
            }
            break;
        case DAY:
            ch = 'D';
            if ( input == INCREASE ) {
 4e4:	8f 3f       	cpi	r24, 0xFF	; 255
 4e6:	39 f4       	brne	.+14     	; 0x4f6 <change_time+0x96>
                date.day++;
 4e8:	ef e6       	ldi	r30, 0x6F	; 111
 4ea:	f1 e0       	ldi	r31, 0x01	; 1
 4ec:	80 a9       	ldd	r24, Z+48	; 0x30
 4ee:	8f 5f       	subi	r24, 0xFF	; 255
 4f0:	80 ab       	std	Z+48, r24	; 0x30
            } else {
                date.hour--;
            }
            break;
        case DAY:
            ch = 'D';
 4f2:	64 e4       	ldi	r22, 0x44	; 68
 4f4:	2c c0       	rjmp	.+88     	; 0x54e <change_time+0xee>
            if ( input == INCREASE ) {
                date.day++;
            } else {
                date.day--;
 4f6:	ef e6       	ldi	r30, 0x6F	; 111
 4f8:	f1 e0       	ldi	r31, 0x01	; 1
 4fa:	80 a9       	ldd	r24, Z+48	; 0x30
 4fc:	81 50       	subi	r24, 0x01	; 1
 4fe:	80 ab       	std	Z+48, r24	; 0x30
            } else {
                date.hour--;
            }
            break;
        case DAY:
            ch = 'D';
 500:	64 e4       	ldi	r22, 0x44	; 68
 502:	25 c0       	rjmp	.+74     	; 0x54e <change_time+0xee>
                date.day--;
            }
            break;
        case MONTH:
            ch = 'M';
            if ( input == INCREASE ){
 504:	8f 3f       	cpi	r24, 0xFF	; 255
 506:	39 f4       	brne	.+14     	; 0x516 <change_time+0xb6>
                date.month++;
 508:	ef ea       	ldi	r30, 0xAF	; 175
 50a:	f1 e0       	ldi	r31, 0x01	; 1
 50c:	80 81       	ld	r24, Z
 50e:	8f 5f       	subi	r24, 0xFF	; 255
 510:	80 83       	st	Z, r24
            } else {
                date.day--;
            }
            break;
        case MONTH:
            ch = 'M';
 512:	6d e4       	ldi	r22, 0x4D	; 77
 514:	1c c0       	rjmp	.+56     	; 0x54e <change_time+0xee>
            if ( input == INCREASE ){
                date.month++;
            } else {
                date.month--;
 516:	ef ea       	ldi	r30, 0xAF	; 175
 518:	f1 e0       	ldi	r31, 0x01	; 1
 51a:	80 81       	ld	r24, Z
 51c:	81 50       	subi	r24, 0x01	; 1
 51e:	80 83       	st	Z, r24
            } else {
                date.day--;
            }
            break;
        case MONTH:
            ch = 'M';
 520:	6d e4       	ldi	r22, 0x4D	; 77
 522:	15 c0       	rjmp	.+42     	; 0x54e <change_time+0xee>
                date.month--;
            }
            break;
        case YEAR:
            ch = 'Y';
            if ( input == INCREASE ) {
 524:	8f 3f       	cpi	r24, 0xFF	; 255
 526:	49 f4       	brne	.+18     	; 0x53a <change_time+0xda>
                date.year++;
 528:	ef eb       	ldi	r30, 0xBF	; 191
 52a:	f1 e0       	ldi	r31, 0x01	; 1
 52c:	80 81       	ld	r24, Z
 52e:	91 81       	ldd	r25, Z+1	; 0x01
 530:	01 96       	adiw	r24, 0x01	; 1
 532:	91 83       	std	Z+1, r25	; 0x01
 534:	80 83       	st	Z, r24
            } else {
                date.month--;
            }
            break;
        case YEAR:
            ch = 'Y';
 536:	69 e5       	ldi	r22, 0x59	; 89
 538:	0a c0       	rjmp	.+20     	; 0x54e <change_time+0xee>
            if ( input == INCREASE ) {
                date.year++;
            } else {
                date.year--;
 53a:	ef eb       	ldi	r30, 0xBF	; 191
 53c:	f1 e0       	ldi	r31, 0x01	; 1
 53e:	80 81       	ld	r24, Z
 540:	91 81       	ldd	r25, Z+1	; 0x01
 542:	01 97       	sbiw	r24, 0x01	; 1
 544:	91 83       	std	Z+1, r25	; 0x01
 546:	80 83       	st	Z, r24
            } else {
                date.month--;
            }
            break;
        case YEAR:
            ch = 'Y';
 548:	69 e5       	ldi	r22, 0x59	; 89
 54a:	01 c0       	rjmp	.+2      	; 0x54e <change_time+0xee>
    }
}

uint8_t change_time(uint8_t input) {
    
    char ch = 0;
 54c:	60 e0       	ldi	r22, 0x00	; 0
            } else {
                date.year--;
            }
            break;
    }
    update_display(MODE_SETUP, ch);
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	0e 94 66 01 	call	0x2cc	; 0x2cc <update_display>
    return 1;
}
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	08 95       	ret

00000558 <timer_init>:

}

void timer_init(void) {

    TCCR1B |= (1<<WGM12); // Configure timer1 for CTC mode
 558:	e1 e8       	ldi	r30, 0x81	; 129
 55a:	f0 e0       	ldi	r31, 0x00	; 0
 55c:	80 81       	ld	r24, Z
 55e:	88 60       	ori	r24, 0x08	; 8
 560:	80 83       	st	Z, r24
    TIMSK1 |= (1<<OCIE1A); // Interrupt enable
 562:	af e6       	ldi	r26, 0x6F	; 111
 564:	b0 e0       	ldi	r27, 0x00	; 0
 566:	8c 91       	ld	r24, X
 568:	82 60       	ori	r24, 0x02	; 2
 56a:	8c 93       	st	X, r24

    // 1 0000 000 / 256 = 3 906.25
    // 65 535 / 3 906.25 = 9.09696
    // 65535 / 9.09696 = 7204

    OCR1A = 7204; // Trigger interrupt when overflow
 56c:	84 e2       	ldi	r24, 0x24	; 36
 56e:	9c e1       	ldi	r25, 0x1C	; 28
 570:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 574:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TCCR1B |= (1<<CS12); // Prescaler = 256 to get a even number
 578:	80 81       	ld	r24, Z
 57a:	84 60       	ori	r24, 0x04	; 4
 57c:	80 83       	st	Z, r24

    sei();
 57e:	78 94       	sei
 580:	08 95       	ret

00000582 <pin_interrupt_init>:
}

void pin_interrupt_init(void){

    PCMSK1 |= (1<<PCINT11) | (1<<PCINT12) | (1<<PCINT13);
 582:	ec e6       	ldi	r30, 0x6C	; 108
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	80 81       	ld	r24, Z
 588:	88 63       	ori	r24, 0x38	; 56
 58a:	80 83       	st	Z, r24
    PCICR |= (1<<PCIE1); // Enable interrupt on PCMSK1
 58c:	e8 e6       	ldi	r30, 0x68	; 104
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	80 81       	ld	r24, Z
 592:	82 60       	ori	r24, 0x02	; 2
 594:	80 83       	st	Z, r24
 596:	08 95       	ret

00000598 <system_init>:

}

void system_init(void){

    lcd_init(LCD_DISP_ON_CURSOR);
 598:	8e e0       	ldi	r24, 0x0E	; 14
 59a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_init>
    lcd_clrscr();
 59e:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_clrscr>
    timer_init();
 5a2:	0e 94 ac 02 	call	0x558	; 0x558 <timer_init>
    pin_interrupt_init();
 5a6:	0e 94 c1 02 	call	0x582	; 0x582 <pin_interrupt_init>


    interrupt_bits_old = 0;
 5aa:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <interrupt_bits_old>
    firtst_time = 0;
 5ae:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <firtst_time>
    current_mode = 0;
    time_control = 0;
 5b2:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <time_control>
    button_pressed = 0;
 5b6:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <button_pressed>


    PORTB = 0;
 5ba:	15 b8       	out	0x05, r1	; 5
    DDRB = (1<<PORTB0) | (1<<PORTB1) | (1<<PORTB2) | (1<<PORTB3) | (1<<PORTB4) | (1<<PORTB5);
 5bc:	8f e3       	ldi	r24, 0x3F	; 63
 5be:	84 b9       	out	0x04, r24	; 4

    date.day = 1;
 5c0:	ef e6       	ldi	r30, 0x6F	; 111
 5c2:	f1 e0       	ldi	r31, 0x01	; 1
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	80 ab       	std	Z+48, r24	; 0x30
    date.month = 12;
 5c8:	8c e0       	ldi	r24, 0x0C	; 12
 5ca:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <date+0x40>
    date.year = 2016;
 5ce:	80 ee       	ldi	r24, 0xE0	; 224
 5d0:	97 e0       	ldi	r25, 0x07	; 7
 5d2:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <date+0x51>
 5d6:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <date+0x50>
    date.hour = 23;
 5da:	87 e1       	ldi	r24, 0x17	; 23
 5dc:	80 a3       	std	Z+32, r24	; 0x20
    date.min = 59;
 5de:	8b e3       	ldi	r24, 0x3B	; 59
 5e0:	80 8b       	std	Z+16, r24	; 0x10
    date.sec = 50;
 5e2:	82 e3       	ldi	r24, 0x32	; 50
 5e4:	80 83       	st	Z, r24

    current_mode = 0;
 5e6:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <__data_end>
 5ea:	08 95       	ret

000005ec <main>:
#include <stdlib.h>


int main() {

    system_init();
 5ec:	0e 94 cc 02 	call	0x598	; 0x598 <system_init>
    uint8_t last_sec = date.sec;
 5f0:	10 91 6f 01 	lds	r17, 0x016F	; 0x80016f <date>

    run_tests();
 5f4:	0e 94 75 04 	call	0x8ea	; 0x8ea <run_tests>

    while (1) {
        if(last_sec != date.sec){
 5f8:	cf e6       	ldi	r28, 0x6F	; 111
 5fa:	d1 e0       	ldi	r29, 0x01	; 1
 5fc:	88 81       	ld	r24, Y
 5fe:	81 17       	cp	r24, r17
 600:	51 f0       	breq	.+20     	; 0x616 <main+0x2a>
            PORTB &= ~(1<<PORTB5); //Turn pulse port low
 602:	2d 98       	cbi	0x05, 5	; 5
            update_time();
 604:	0e 94 37 01 	call	0x26e	; 0x26e <update_time>
            update_led();
 608:	0e 94 33 01 	call	0x266	; 0x266 <update_led>
            update_display(MODE_RUNNING, 0);
 60c:	60 e0       	ldi	r22, 0x00	; 0
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	0e 94 66 01 	call	0x2cc	; 0x2cc <update_display>
            last_sec = date.sec;
 614:	18 81       	ld	r17, Y
        } 

        while(current_mode) {
 616:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <__data_end>
 61a:	99 23       	and	r25, r25
 61c:	79 f3       	breq	.-34     	; 0x5fc <main+0x10>
            // Control to update display. Last thing to do should be to SAVE (exit by pressing mode)
            if(time_control & MODE) {
 61e:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <time_control>
 622:	80 ff       	sbrs	r24, 0
 624:	08 c0       	rjmp	.+16     	; 0x636 <main+0x4a>
                current_mode--;
 626:	91 50       	subi	r25, 0x01	; 1
 628:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <__data_end>
                update_display(MODE_SETUP, '*');
 62c:	6a e2       	ldi	r22, 0x2A	; 42
 62e:	80 e0       	ldi	r24, 0x00	; 0
 630:	0e 94 66 01 	call	0x2cc	; 0x2cc <update_display>
 634:	0b c0       	rjmp	.+22     	; 0x64c <main+0x60>
            }
            else if(time_control & PLUS) {
 636:	81 ff       	sbrs	r24, 1
 638:	04 c0       	rjmp	.+8      	; 0x642 <main+0x56>
                change_time(INCREASE);
 63a:	8f ef       	ldi	r24, 0xFF	; 255
 63c:	0e 94 30 02 	call	0x460	; 0x460 <change_time>
 640:	05 c0       	rjmp	.+10     	; 0x64c <main+0x60>
            }
            else if(time_control & MINUS) {
 642:	82 ff       	sbrs	r24, 2
 644:	03 c0       	rjmp	.+6      	; 0x64c <main+0x60>
                change_time(DECREASE);
 646:	8e ef       	ldi	r24, 0xFE	; 254
 648:	0e 94 30 02 	call	0x460	; 0x460 <change_time>
            }
            time_control = 0;
 64c:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <time_control>
            update_led();
            update_display(MODE_RUNNING, 0);
            last_sec = date.sec;
        } 

        while(current_mode) {
 650:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <__data_end>
 654:	91 11       	cpse	r25, r1
 656:	e3 cf       	rjmp	.-58     	; 0x61e <main+0x32>
 658:	d1 cf       	rjmp	.-94     	; 0x5fc <main+0x10>

0000065a <__vector_11>:

    PCMSK1 |= (1<<PCINT11) | (1<<PCINT12) | (1<<PCINT13);
    PCICR |= (1<<PCIE1); // Enable interrupt on PCMSK1
}

ISR(TIMER1_COMPA_vect) {
 65a:	1f 92       	push	r1
 65c:	0f 92       	push	r0
 65e:	0f b6       	in	r0, 0x3f	; 63
 660:	0f 92       	push	r0
 662:	11 24       	eor	r1, r1
 664:	8f 93       	push	r24
 666:	ef 93       	push	r30
 668:	ff 93       	push	r31
    date.sec++;
 66a:	ef e6       	ldi	r30, 0x6F	; 111
 66c:	f1 e0       	ldi	r31, 0x01	; 1
 66e:	80 81       	ld	r24, Z
 670:	8f 5f       	subi	r24, 0xFF	; 255
 672:	80 83       	st	Z, r24
    PORTB |= (1<<PORTB5); //Turn port HIGH
 674:	2d 9a       	sbi	0x05, 5	; 5
    if(date.sec >= 60) date.sec = 0;
 676:	80 81       	ld	r24, Z
 678:	8c 33       	cpi	r24, 0x3C	; 60
 67a:	10 f0       	brcs	.+4      	; 0x680 <__vector_11+0x26>
 67c:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <date>
}
 680:	ff 91       	pop	r31
 682:	ef 91       	pop	r30
 684:	8f 91       	pop	r24
 686:	0f 90       	pop	r0
 688:	0f be       	out	0x3f, r0	; 63
 68a:	0f 90       	pop	r0
 68c:	1f 90       	pop	r1
 68e:	18 95       	reti

00000690 <__vector_4>:

ISR(PCINT1_vect) {
 690:	1f 92       	push	r1
 692:	0f 92       	push	r0
 694:	0f b6       	in	r0, 0x3f	; 63
 696:	0f 92       	push	r0
 698:	11 24       	eor	r1, r1
 69a:	8f 93       	push	r24
 69c:	9f 93       	push	r25

    uint8_t interrupt_bits_new, reg;

    reg = PINC;
 69e:	96 b1       	in	r25, 0x06	; 6

    interrupt_bits_new = reg ^ interrupt_bits_old;
 6a0:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <interrupt_bits_old>
 6a4:	89 27       	eor	r24, r25
    interrupt_bits_old = reg;
 6a6:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <interrupt_bits_old>


    if(interrupt_bits_new & (1<<PCINT11)){
 6aa:	83 ff       	sbrs	r24, 3
 6ac:	0d c0       	rjmp	.+26     	; 0x6c8 <__vector_4+0x38>
        time_control |= MODE;
 6ae:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <time_control>
 6b2:	81 60       	ori	r24, 0x01	; 1
 6b4:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <time_control>
        if (current_mode <= 0)
 6b8:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <__data_end>
 6bc:	81 11       	cpse	r24, r1
 6be:	13 c0       	rjmp	.+38     	; 0x6e6 <__vector_4+0x56>
        current_mode = 7;
 6c0:	87 e0       	ldi	r24, 0x07	; 7
 6c2:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <__data_end>
 6c6:	0f c0       	rjmp	.+30     	; 0x6e6 <__vector_4+0x56>
    }
    else if(interrupt_bits_new & (1<<PCINT12)){
 6c8:	84 ff       	sbrs	r24, 4
 6ca:	06 c0       	rjmp	.+12     	; 0x6d8 <__vector_4+0x48>
        time_control |= PLUS;
 6cc:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <time_control>
 6d0:	82 60       	ori	r24, 0x02	; 2
 6d2:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <time_control>
 6d6:	07 c0       	rjmp	.+14     	; 0x6e6 <__vector_4+0x56>
    }
    else if(interrupt_bits_new & (1<<PCINT13)){
 6d8:	85 ff       	sbrs	r24, 5
 6da:	05 c0       	rjmp	.+10     	; 0x6e6 <__vector_4+0x56>
        time_control |= MINUS;
 6dc:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <time_control>
 6e0:	84 60       	ori	r24, 0x04	; 4
 6e2:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <time_control>
    }

}
 6e6:	9f 91       	pop	r25
 6e8:	8f 91       	pop	r24
 6ea:	0f 90       	pop	r0
 6ec:	0f be       	out	0x3f, r0	; 63
 6ee:	0f 90       	pop	r0
 6f0:	1f 90       	pop	r1
 6f2:	18 95       	reti

000006f4 <test_leds>:
    _delay_ms(3000);
}

uint8_t test_leds(void){

    PORTB = (1<<PORTB0);
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6f8:	2f e9       	ldi	r18, 0x9F	; 159
 6fa:	86 e8       	ldi	r24, 0x86	; 134
 6fc:	91 e0       	ldi	r25, 0x01	; 1
 6fe:	21 50       	subi	r18, 0x01	; 1
 700:	80 40       	sbci	r24, 0x00	; 0
 702:	90 40       	sbci	r25, 0x00	; 0
 704:	e1 f7       	brne	.-8      	; 0x6fe <test_leds+0xa>
 706:	00 c0       	rjmp	.+0      	; 0x708 <test_leds+0x14>
 708:	00 00       	nop
    _delay_ms(500);
    PORTB = (1<<PORTB1);
 70a:	82 e0       	ldi	r24, 0x02	; 2
 70c:	85 b9       	out	0x05, r24	; 5
 70e:	2f e9       	ldi	r18, 0x9F	; 159
 710:	86 e8       	ldi	r24, 0x86	; 134
 712:	91 e0       	ldi	r25, 0x01	; 1
 714:	21 50       	subi	r18, 0x01	; 1
 716:	80 40       	sbci	r24, 0x00	; 0
 718:	90 40       	sbci	r25, 0x00	; 0
 71a:	e1 f7       	brne	.-8      	; 0x714 <test_leds+0x20>
 71c:	00 c0       	rjmp	.+0      	; 0x71e <test_leds+0x2a>
 71e:	00 00       	nop
    _delay_ms(500);
    PORTB = (1<<PORTB2);
 720:	84 e0       	ldi	r24, 0x04	; 4
 722:	85 b9       	out	0x05, r24	; 5
 724:	2f e9       	ldi	r18, 0x9F	; 159
 726:	86 e8       	ldi	r24, 0x86	; 134
 728:	91 e0       	ldi	r25, 0x01	; 1
 72a:	21 50       	subi	r18, 0x01	; 1
 72c:	80 40       	sbci	r24, 0x00	; 0
 72e:	90 40       	sbci	r25, 0x00	; 0
 730:	e1 f7       	brne	.-8      	; 0x72a <test_leds+0x36>
 732:	00 c0       	rjmp	.+0      	; 0x734 <test_leds+0x40>
 734:	00 00       	nop
    _delay_ms(500);
    PORTB = (1<<PORTB3);
 736:	88 e0       	ldi	r24, 0x08	; 8
 738:	85 b9       	out	0x05, r24	; 5
 73a:	2f e9       	ldi	r18, 0x9F	; 159
 73c:	86 e8       	ldi	r24, 0x86	; 134
 73e:	91 e0       	ldi	r25, 0x01	; 1
 740:	21 50       	subi	r18, 0x01	; 1
 742:	80 40       	sbci	r24, 0x00	; 0
 744:	90 40       	sbci	r25, 0x00	; 0
 746:	e1 f7       	brne	.-8      	; 0x740 <test_leds+0x4c>
 748:	00 c0       	rjmp	.+0      	; 0x74a <test_leds+0x56>
 74a:	00 00       	nop
    _delay_ms(500);
    PORTB = (1<<PORTB4);
 74c:	80 e1       	ldi	r24, 0x10	; 16
 74e:	85 b9       	out	0x05, r24	; 5
 750:	2f e9       	ldi	r18, 0x9F	; 159
 752:	86 e8       	ldi	r24, 0x86	; 134
 754:	91 e0       	ldi	r25, 0x01	; 1
 756:	21 50       	subi	r18, 0x01	; 1
 758:	80 40       	sbci	r24, 0x00	; 0
 75a:	90 40       	sbci	r25, 0x00	; 0
 75c:	e1 f7       	brne	.-8      	; 0x756 <test_leds+0x62>
 75e:	00 c0       	rjmp	.+0      	; 0x760 <test_leds+0x6c>
 760:	00 00       	nop
    _delay_ms(500);

    return TRUE;

}
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	08 95       	ret

00000766 <test_sec>:

uint8_t test_sec(void ){
    uint8_t last_sec = 0;
    last_sec = date.sec;
 766:	ef e6       	ldi	r30, 0x6F	; 111
 768:	f1 e0       	ldi	r31, 0x01	; 1
 76a:	90 81       	ld	r25, Z
    uint8_t passed = 0;

    for (uint8_t i = 0; i<5; i++){
        if(date.sec > last_sec){
 76c:	80 81       	ld	r24, Z
 76e:	98 17       	cp	r25, r24
 770:	a8 f0       	brcs	.+42     	; 0x79c <test_sec+0x36>
            passed += TRUE;
        } else {
            return FALSE;
 772:	80 e0       	ldi	r24, 0x00	; 0
 774:	08 95       	ret
    uint8_t last_sec = 0;
    last_sec = date.sec;
    uint8_t passed = 0;

    for (uint8_t i = 0; i<5; i++){
        if(date.sec > last_sec){
 776:	20 81       	ld	r18, Z
 778:	92 17       	cp	r25, r18
 77a:	70 f4       	brcc	.+28     	; 0x798 <test_sec+0x32>
            passed += TRUE;
        } else {
            return FALSE;
        }
        last_sec = date.sec;
 77c:	90 81       	ld	r25, Z
 77e:	2f e7       	ldi	r18, 0x7F	; 127
 780:	39 ea       	ldi	r19, 0xA9	; 169
 782:	43 e0       	ldi	r20, 0x03	; 3
 784:	21 50       	subi	r18, 0x01	; 1
 786:	30 40       	sbci	r19, 0x00	; 0
 788:	40 40       	sbci	r20, 0x00	; 0
 78a:	e1 f7       	brne	.-8      	; 0x784 <test_sec+0x1e>
 78c:	00 c0       	rjmp	.+0      	; 0x78e <test_sec+0x28>
 78e:	00 00       	nop
 790:	81 50       	subi	r24, 0x01	; 1
uint8_t test_sec(void ){
    uint8_t last_sec = 0;
    last_sec = date.sec;
    uint8_t passed = 0;

    for (uint8_t i = 0; i<5; i++){
 792:	89 f7       	brne	.-30     	; 0x776 <test_sec+0x10>
            return FALSE;
        }
        last_sec = date.sec;
        _delay_ms(1200);
    }
    return TRUE;
 794:	81 e0       	ldi	r24, 0x01	; 1
 796:	08 95       	ret

    for (uint8_t i = 0; i<5; i++){
        if(date.sec > last_sec){
            passed += TRUE;
        } else {
            return FALSE;
 798:	80 e0       	ldi	r24, 0x00	; 0
 79a:	08 95       	ret
        }
        last_sec = date.sec;
 79c:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <date>
 7a0:	8f e7       	ldi	r24, 0x7F	; 127
 7a2:	29 ea       	ldi	r18, 0xA9	; 169
 7a4:	33 e0       	ldi	r19, 0x03	; 3
 7a6:	81 50       	subi	r24, 0x01	; 1
 7a8:	20 40       	sbci	r18, 0x00	; 0
 7aa:	30 40       	sbci	r19, 0x00	; 0
 7ac:	e1 f7       	brne	.-8      	; 0x7a6 <test_sec+0x40>
 7ae:	00 c0       	rjmp	.+0      	; 0x7b0 <test_sec+0x4a>
 7b0:	00 00       	nop
 7b2:	84 e0       	ldi	r24, 0x04	; 4
    uint8_t last_sec = 0;
    last_sec = date.sec;
    uint8_t passed = 0;

    for (uint8_t i = 0; i<5; i++){
        if(date.sec > last_sec){
 7b4:	ef e6       	ldi	r30, 0x6F	; 111
 7b6:	f1 e0       	ldi	r31, 0x01	; 1
 7b8:	de cf       	rjmp	.-68     	; 0x776 <test_sec+0x10>

000007ba <test_lcd>:
    return TRUE;
}

uint8_t test_lcd(void){

    lcd_clrscr();
 7ba:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_clrscr>
    lcd_gotoxy(0,0);
 7be:	60 e0       	ldi	r22, 0x00	; 0
 7c0:	80 e0       	ldi	r24, 0x00	; 0
 7c2:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_gotoxy>
    lcd_puts("TEST_LCD");
 7c6:	8f e2       	ldi	r24, 0x2F	; 47
 7c8:	91 e0       	ldi	r25, 0x01	; 1
 7ca:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
 7ce:	2f e3       	ldi	r18, 0x3F	; 63
 7d0:	8d e0       	ldi	r24, 0x0D	; 13
 7d2:	93 e0       	ldi	r25, 0x03	; 3
 7d4:	21 50       	subi	r18, 0x01	; 1
 7d6:	80 40       	sbci	r24, 0x00	; 0
 7d8:	90 40       	sbci	r25, 0x00	; 0
 7da:	e1 f7       	brne	.-8      	; 0x7d4 <test_lcd+0x1a>
 7dc:	00 c0       	rjmp	.+0      	; 0x7de <test_lcd+0x24>
 7de:	00 00       	nop
    _delay_ms(1000);
    return TRUE;
}
 7e0:	81 e0       	ldi	r24, 0x01	; 1
 7e2:	08 95       	ret

000007e4 <test_lcd_date>:

uint8_t test_lcd_date(void){

    lcd_clrscr();
 7e4:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_clrscr>
    update_display(MODE_RUNNING, 0);
 7e8:	60 e0       	ldi	r22, 0x00	; 0
 7ea:	81 e0       	ldi	r24, 0x01	; 1
 7ec:	0e 94 66 01 	call	0x2cc	; 0x2cc <update_display>
 7f0:	2f e3       	ldi	r18, 0x3F	; 63
 7f2:	8d e0       	ldi	r24, 0x0D	; 13
 7f4:	93 e0       	ldi	r25, 0x03	; 3
 7f6:	21 50       	subi	r18, 0x01	; 1
 7f8:	80 40       	sbci	r24, 0x00	; 0
 7fa:	90 40       	sbci	r25, 0x00	; 0
 7fc:	e1 f7       	brne	.-8      	; 0x7f6 <test_lcd_date+0x12>
 7fe:	00 c0       	rjmp	.+0      	; 0x800 <test_lcd_date+0x1c>
 800:	00 00       	nop
    _delay_ms(1000);

    return TRUE;
}
 802:	81 e0       	ldi	r24, 0x01	; 1
 804:	08 95       	ret

00000806 <test_lcd_sec_update>:

uint8_t test_lcd_sec_update(void){
 806:	0f 93       	push	r16
 808:	1f 93       	push	r17
 80a:	cf 93       	push	r28
 80c:	df 93       	push	r29
 80e:	cd b7       	in	r28, 0x3d	; 61
 810:	de b7       	in	r29, 0x3e	; 62
 812:	2a 97       	sbiw	r28, 0x0a	; 10
 814:	0f b6       	in	r0, 0x3f	; 63
 816:	f8 94       	cli
 818:	de bf       	out	0x3e, r29	; 62
 81a:	0f be       	out	0x3f, r0	; 63
 81c:	cd bf       	out	0x3d, r28	; 61
 81e:	00 e0       	ldi	r16, 0x00	; 0
 820:	10 e0       	ldi	r17, 0x00	; 0

    char i = 0;
    char i_array[10];

    for(; i<20; i++){
        lcd_clrscr();
 822:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_clrscr>
        lcd_gotoxy(0,0);
 826:	60 e0       	ldi	r22, 0x00	; 0
 828:	80 e0       	ldi	r24, 0x00	; 0
 82a:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_gotoxy>
        lcd_puts("Updating screen");
 82e:	88 e3       	ldi	r24, 0x38	; 56
 830:	91 e0       	ldi	r25, 0x01	; 1
 832:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
        lcd_gotoxy(0,1);
 836:	61 e0       	ldi	r22, 0x01	; 1
 838:	80 e0       	ldi	r24, 0x00	; 0
 83a:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_gotoxy>
 83e:	4a e0       	ldi	r20, 0x0A	; 10
 840:	be 01       	movw	r22, r28
 842:	6f 5f       	subi	r22, 0xFF	; 255
 844:	7f 4f       	sbci	r23, 0xFF	; 255
 846:	c8 01       	movw	r24, r16
 848:	0e 94 a3 04 	call	0x946	; 0x946 <__itoa_ncheck>
        itoa(i, i_array, 10);
        lcd_puts(i_array);
 84c:	ce 01       	movw	r24, r28
 84e:	01 96       	adiw	r24, 0x01	; 1
 850:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
 854:	2f e3       	ldi	r18, 0x3F	; 63
 856:	8d e0       	ldi	r24, 0x0D	; 13
 858:	93 e0       	ldi	r25, 0x03	; 3
 85a:	21 50       	subi	r18, 0x01	; 1
 85c:	80 40       	sbci	r24, 0x00	; 0
 85e:	90 40       	sbci	r25, 0x00	; 0
 860:	e1 f7       	brne	.-8      	; 0x85a <test_lcd_sec_update+0x54>
 862:	00 c0       	rjmp	.+0      	; 0x864 <test_lcd_sec_update+0x5e>
 864:	00 00       	nop
 866:	0f 5f       	subi	r16, 0xFF	; 255
 868:	1f 4f       	sbci	r17, 0xFF	; 255
uint8_t test_lcd_sec_update(void){

    char i = 0;
    char i_array[10];

    for(; i<20; i++){
 86a:	04 31       	cpi	r16, 0x14	; 20
 86c:	11 05       	cpc	r17, r1
 86e:	c9 f6       	brne	.-78     	; 0x822 <test_lcd_sec_update+0x1c>
        itoa(i, i_array, 10);
        lcd_puts(i_array);
        _delay_ms(1000);
    }
    return TRUE;
}
 870:	81 e0       	ldi	r24, 0x01	; 1
 872:	2a 96       	adiw	r28, 0x0a	; 10
 874:	0f b6       	in	r0, 0x3f	; 63
 876:	f8 94       	cli
 878:	de bf       	out	0x3e, r29	; 62
 87a:	0f be       	out	0x3f, r0	; 63
 87c:	cd bf       	out	0x3d, r28	; 61
 87e:	df 91       	pop	r29
 880:	cf 91       	pop	r28
 882:	1f 91       	pop	r17
 884:	0f 91       	pop	r16
 886:	08 95       	ret

00000888 <test_button>:

uint8_t test_button(void){

    lcd_clrscr();
 888:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_clrscr>
    lcd_gotoxy(0,0);
 88c:	60 e0       	ldi	r22, 0x00	; 0
 88e:	80 e0       	ldi	r24, 0x00	; 0
 890:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_gotoxy>
    lcd_puts("Press mode 3");
 894:	88 e4       	ldi	r24, 0x48	; 72
 896:	91 e0       	ldi	r25, 0x01	; 1
 898:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
    lcd_gotoxy(0,1);
 89c:	61 e0       	ldi	r22, 0x01	; 1
 89e:	80 e0       	ldi	r24, 0x00	; 0
 8a0:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_gotoxy>
    lcd_puts("times to exit");
 8a4:	85 e5       	ldi	r24, 0x55	; 85
 8a6:	91 e0       	ldi	r25, 0x01	; 1
 8a8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>

    uint8_t ret_function = 3;
 8ac:	93 e0       	ldi	r25, 0x03	; 3
        }
        else if (time_control & MINUS){
            PORTB = (1<<PORTB2);
            ret_function = 3;
        }
        time_control = 0;
 8ae:	33 e0       	ldi	r19, 0x03	; 3
        else if (time_control & PLUS){
            PORTB = (1<<PORTB1);
            ret_function = 3;
        }
        else if (time_control & MINUS){
            PORTB = (1<<PORTB2);
 8b0:	54 e0       	ldi	r21, 0x04	; 4
        if(time_control & MODE){
            PORTB = (1<<PORTB0);
            ret_function--;
        }
        else if (time_control & PLUS){
            PORTB = (1<<PORTB1);
 8b2:	42 e0       	ldi	r20, 0x02	; 2

    uint8_t ret_function = 3;

    while(ret_function){
        if(time_control & MODE){
            PORTB = (1<<PORTB0);
 8b4:	21 e0       	ldi	r18, 0x01	; 1
    lcd_puts("times to exit");

    uint8_t ret_function = 3;

    while(ret_function){
        if(time_control & MODE){
 8b6:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <time_control>
 8ba:	80 ff       	sbrs	r24, 0
 8bc:	03 c0       	rjmp	.+6      	; 0x8c4 <test_button+0x3c>
            PORTB = (1<<PORTB0);
 8be:	25 b9       	out	0x05, r18	; 5
            ret_function--;
 8c0:	91 50       	subi	r25, 0x01	; 1
 8c2:	08 c0       	rjmp	.+16     	; 0x8d4 <test_button+0x4c>
        }
        else if (time_control & PLUS){
 8c4:	81 ff       	sbrs	r24, 1
 8c6:	02 c0       	rjmp	.+4      	; 0x8cc <test_button+0x44>
            PORTB = (1<<PORTB1);
 8c8:	45 b9       	out	0x05, r20	; 5
 8ca:	09 c0       	rjmp	.+18     	; 0x8de <test_button+0x56>
            ret_function = 3;
        }
        else if (time_control & MINUS){
 8cc:	82 ff       	sbrs	r24, 2
 8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <test_button+0x4c>
            PORTB = (1<<PORTB2);
 8d0:	55 b9       	out	0x05, r21	; 5
 8d2:	05 c0       	rjmp	.+10     	; 0x8de <test_button+0x56>
            ret_function = 3;
        }
        time_control = 0;
 8d4:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <time_control>
    lcd_gotoxy(0,1);
    lcd_puts("times to exit");

    uint8_t ret_function = 3;

    while(ret_function){
 8d8:	91 11       	cpse	r25, r1
 8da:	ed cf       	rjmp	.-38     	; 0x8b6 <test_button+0x2e>
 8dc:	04 c0       	rjmp	.+8      	; 0x8e6 <test_button+0x5e>
        }
        else if (time_control & MINUS){
            PORTB = (1<<PORTB2);
            ret_function = 3;
        }
        time_control = 0;
 8de:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <time_control>
 8e2:	93 2f       	mov	r25, r19
 8e4:	e8 cf       	rjmp	.-48     	; 0x8b6 <test_button+0x2e>
    }
    return TRUE;
}
 8e6:	81 e0       	ldi	r24, 0x01	; 1
 8e8:	08 95       	ret

000008ea <run_tests>:
#include "lcd.h"
#include "test.h"
#include <util/delay.h>


uint8_t run_tests(void){
 8ea:	cf 93       	push	r28

    uint8_t test_passed = 0;
    uint8_t nmbr_of_tests = 6;

    test_passed += test_leds();
 8ec:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <test_leds>
 8f0:	c8 2f       	mov	r28, r24
    test_passed += test_sec();
 8f2:	0e 94 b3 03 	call	0x766	; 0x766 <test_sec>
 8f6:	c8 0f       	add	r28, r24
    test_passed += test_lcd();
 8f8:	0e 94 dd 03 	call	0x7ba	; 0x7ba <test_lcd>
 8fc:	c8 0f       	add	r28, r24
    test_passed += test_lcd_date();
 8fe:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <test_lcd_date>
 902:	c8 0f       	add	r28, r24
    test_passed += test_lcd_sec_update();
 904:	0e 94 03 04 	call	0x806	; 0x806 <test_lcd_sec_update>
 908:	c8 0f       	add	r28, r24
    test_passed += test_button();
 90a:	0e 94 44 04 	call	0x888	; 0x888 <test_button>
 90e:	8c 0f       	add	r24, r28

    if(test_passed == nmbr_of_tests){
 910:	86 30       	cpi	r24, 0x06	; 6
 912:	61 f4       	brne	.+24     	; 0x92c <__stack+0x2d>
        lcd_clrscr();
 914:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_clrscr>
        lcd_gotoxy(0,0);
 918:	60 e0       	ldi	r22, 0x00	; 0
 91a:	80 e0       	ldi	r24, 0x00	; 0
 91c:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_gotoxy>
        lcd_puts("PASSED!");
 920:	83 e6       	ldi	r24, 0x63	; 99
 922:	91 e0       	ldi	r25, 0x01	; 1
 924:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
        return TRUE;
 928:	81 e0       	ldi	r24, 0x01	; 1
 92a:	0b c0       	rjmp	.+22     	; 0x942 <__stack+0x43>
    } else {
        lcd_clrscr();
 92c:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_clrscr>
        lcd_gotoxy(0,0);
 930:	60 e0       	ldi	r22, 0x00	; 0
 932:	80 e0       	ldi	r24, 0x00	; 0
 934:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_gotoxy>
        lcd_puts("PASSED!");
 938:	83 e6       	ldi	r24, 0x63	; 99
 93a:	91 e0       	ldi	r25, 0x01	; 1
 93c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
        return FALSE;
 940:	80 e0       	ldi	r24, 0x00	; 0
    }
    _delay_ms(3000);
}
 942:	cf 91       	pop	r28
 944:	08 95       	ret

00000946 <__itoa_ncheck>:
 946:	bb 27       	eor	r27, r27
 948:	4a 30       	cpi	r20, 0x0A	; 10
 94a:	31 f4       	brne	.+12     	; 0x958 <__itoa_ncheck+0x12>
 94c:	99 23       	and	r25, r25
 94e:	22 f4       	brpl	.+8      	; 0x958 <__itoa_ncheck+0x12>
 950:	bd e2       	ldi	r27, 0x2D	; 45
 952:	90 95       	com	r25
 954:	81 95       	neg	r24
 956:	9f 4f       	sbci	r25, 0xFF	; 255
 958:	0c 94 af 04 	jmp	0x95e	; 0x95e <__utoa_common>

0000095c <__utoa_ncheck>:
 95c:	bb 27       	eor	r27, r27

0000095e <__utoa_common>:
 95e:	fb 01       	movw	r30, r22
 960:	55 27       	eor	r21, r21
 962:	aa 27       	eor	r26, r26
 964:	88 0f       	add	r24, r24
 966:	99 1f       	adc	r25, r25
 968:	aa 1f       	adc	r26, r26
 96a:	a4 17       	cp	r26, r20
 96c:	10 f0       	brcs	.+4      	; 0x972 <__utoa_common+0x14>
 96e:	a4 1b       	sub	r26, r20
 970:	83 95       	inc	r24
 972:	50 51       	subi	r21, 0x10	; 16
 974:	b9 f7       	brne	.-18     	; 0x964 <__utoa_common+0x6>
 976:	a0 5d       	subi	r26, 0xD0	; 208
 978:	aa 33       	cpi	r26, 0x3A	; 58
 97a:	08 f0       	brcs	.+2      	; 0x97e <__utoa_common+0x20>
 97c:	a9 5d       	subi	r26, 0xD9	; 217
 97e:	a1 93       	st	Z+, r26
 980:	00 97       	sbiw	r24, 0x00	; 0
 982:	79 f7       	brne	.-34     	; 0x962 <__utoa_common+0x4>
 984:	b1 11       	cpse	r27, r1
 986:	b1 93       	st	Z+, r27
 988:	11 92       	st	Z+, r1
 98a:	cb 01       	movw	r24, r22
 98c:	0c 94 c8 04 	jmp	0x990	; 0x990 <strrev>

00000990 <strrev>:
 990:	dc 01       	movw	r26, r24
 992:	fc 01       	movw	r30, r24
 994:	67 2f       	mov	r22, r23
 996:	71 91       	ld	r23, Z+
 998:	77 23       	and	r23, r23
 99a:	e1 f7       	brne	.-8      	; 0x994 <strrev+0x4>
 99c:	32 97       	sbiw	r30, 0x02	; 2
 99e:	04 c0       	rjmp	.+8      	; 0x9a8 <strrev+0x18>
 9a0:	7c 91       	ld	r23, X
 9a2:	6d 93       	st	X+, r22
 9a4:	70 83       	st	Z, r23
 9a6:	62 91       	ld	r22, -Z
 9a8:	ae 17       	cp	r26, r30
 9aa:	bf 07       	cpc	r27, r31
 9ac:	c8 f3       	brcs	.-14     	; 0x9a0 <strrev+0x10>
 9ae:	08 95       	ret

000009b0 <_exit>:
 9b0:	f8 94       	cli

000009b2 <__stop_program>:
 9b2:	ff cf       	rjmp	.-2      	; 0x9b2 <__stop_program>
