
Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000244  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000091d  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000038f  00000000  00000000  00000ccd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006e1  00000000  00000000  0000105c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000158  00000000  00000000  00001740  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000028c  00000000  00000000  00001898  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000485  00000000  00000000  00001b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00001fa9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 02 01 	call	0x204	; 0x204 <main>
  78:	0c 94 20 01 	jmp	0x240	; 0x240 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  80:	59 9a       	sbi	0x0b, 1	; 11
  82:	00 00       	nop
  84:	59 98       	cbi	0x0b, 1	; 11
  86:	08 95       	ret

00000088 <lcd_write>:
  88:	cf 93       	push	r28
  8a:	c8 2f       	mov	r28, r24
  8c:	66 23       	and	r22, r22
  8e:	11 f0       	breq	.+4      	; 0x94 <lcd_write+0xc>
  90:	58 9a       	sbi	0x0b, 0	; 11
  92:	01 c0       	rjmp	.+2      	; 0x96 <lcd_write+0xe>
  94:	58 98       	cbi	0x0b, 0	; 11
  96:	5f 98       	cbi	0x0b, 7	; 11
  98:	52 9a       	sbi	0x0a, 2	; 10
  9a:	53 9a       	sbi	0x0a, 3	; 10
  9c:	54 9a       	sbi	0x0a, 4	; 10
  9e:	55 9a       	sbi	0x0a, 5	; 10
  a0:	5d 98       	cbi	0x0b, 5	; 11
  a2:	5c 98       	cbi	0x0b, 4	; 11
  a4:	5b 98       	cbi	0x0b, 3	; 11
  a6:	5a 98       	cbi	0x0b, 2	; 11
  a8:	cc 23       	and	r28, r28
  aa:	0c f4       	brge	.+2      	; 0xae <lcd_write+0x26>
  ac:	5d 9a       	sbi	0x0b, 5	; 11
  ae:	c6 fd       	sbrc	r28, 6
  b0:	5c 9a       	sbi	0x0b, 4	; 11
  b2:	c5 fd       	sbrc	r28, 5
  b4:	5b 9a       	sbi	0x0b, 3	; 11
  b6:	c4 fd       	sbrc	r28, 4
  b8:	5a 9a       	sbi	0x0b, 2	; 11
  ba:	0e 94 40 00 	call	0x80	; 0x80 <toggle_e>
  be:	5d 98       	cbi	0x0b, 5	; 11
  c0:	5c 98       	cbi	0x0b, 4	; 11
  c2:	5b 98       	cbi	0x0b, 3	; 11
  c4:	5a 98       	cbi	0x0b, 2	; 11
  c6:	c3 fd       	sbrc	r28, 3
  c8:	5d 9a       	sbi	0x0b, 5	; 11
  ca:	c2 fd       	sbrc	r28, 2
  cc:	5c 9a       	sbi	0x0b, 4	; 11
  ce:	c1 fd       	sbrc	r28, 1
  d0:	5b 9a       	sbi	0x0b, 3	; 11
  d2:	c0 fd       	sbrc	r28, 0
  d4:	5a 9a       	sbi	0x0b, 2	; 11
  d6:	0e 94 40 00 	call	0x80	; 0x80 <toggle_e>
  da:	5a 9a       	sbi	0x0b, 2	; 11
  dc:	5b 9a       	sbi	0x0b, 3	; 11
  de:	5c 9a       	sbi	0x0b, 4	; 11
  e0:	5d 9a       	sbi	0x0b, 5	; 11
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <lcd_read>:
  e6:	88 23       	and	r24, r24
  e8:	11 f0       	breq	.+4      	; 0xee <lcd_read+0x8>
  ea:	58 9a       	sbi	0x0b, 0	; 11
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <lcd_read+0xa>
  ee:	58 98       	cbi	0x0b, 0	; 11
  f0:	5f 9a       	sbi	0x0b, 7	; 11
  f2:	52 98       	cbi	0x0a, 2	; 10
  f4:	53 98       	cbi	0x0a, 3	; 10
  f6:	54 98       	cbi	0x0a, 4	; 10
  f8:	55 98       	cbi	0x0a, 5	; 10
  fa:	59 9a       	sbi	0x0b, 1	; 11
  fc:	00 00       	nop
  fe:	4a 9b       	sbis	0x09, 2	; 9
 100:	02 c0       	rjmp	.+4      	; 0x106 <lcd_read+0x20>
 102:	80 e1       	ldi	r24, 0x10	; 16
 104:	01 c0       	rjmp	.+2      	; 0x108 <lcd_read+0x22>
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	4b 99       	sbic	0x09, 3	; 9
 10a:	80 62       	ori	r24, 0x20	; 32
 10c:	4c 99       	sbic	0x09, 4	; 9
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	4d 99       	sbic	0x09, 5	; 9
 112:	80 68       	ori	r24, 0x80	; 128
 114:	59 98       	cbi	0x0b, 1	; 11
 116:	00 00       	nop
 118:	59 9a       	sbi	0x0b, 1	; 11
 11a:	00 00       	nop
 11c:	4a 99       	sbic	0x09, 2	; 9
 11e:	81 60       	ori	r24, 0x01	; 1
 120:	4b 99       	sbic	0x09, 3	; 9
 122:	82 60       	ori	r24, 0x02	; 2
 124:	4c 99       	sbic	0x09, 4	; 9
 126:	84 60       	ori	r24, 0x04	; 4
 128:	4d 99       	sbic	0x09, 5	; 9
 12a:	88 60       	ori	r24, 0x08	; 8
 12c:	59 98       	cbi	0x0b, 1	; 11
 12e:	08 95       	ret

00000130 <lcd_waitbusy>:
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_read>
 136:	88 23       	and	r24, r24
 138:	dc f3       	brlt	.-10     	; 0x130 <lcd_waitbusy>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <lcd_waitbusy+0xc>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <lcd_waitbusy+0xe>
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	0e 94 73 00 	call	0xe6	; 0xe6 <lcd_read>
 144:	08 95       	ret

00000146 <lcd_command>:
 146:	cf 93       	push	r28
 148:	c8 2f       	mov	r28, r24
 14a:	0e 94 98 00 	call	0x130	; 0x130 <lcd_waitbusy>
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	8c 2f       	mov	r24, r28
 152:	0e 94 44 00 	call	0x88	; 0x88 <lcd_write>
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <lcd_clrscr>:
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_command>
 160:	08 95       	ret

00000162 <lcd_putc>:
 162:	cf 93       	push	r28
 164:	c8 2f       	mov	r28, r24
 166:	0e 94 98 00 	call	0x130	; 0x130 <lcd_waitbusy>
 16a:	ca 30       	cpi	r28, 0x0A	; 10
 16c:	49 f4       	brne	.+18     	; 0x180 <lcd_putc+0x1e>
 16e:	80 34       	cpi	r24, 0x40	; 64
 170:	10 f0       	brcs	.+4      	; 0x176 <lcd_putc+0x14>
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	01 c0       	rjmp	.+2      	; 0x178 <lcd_putc+0x16>
 176:	80 e4       	ldi	r24, 0x40	; 64
 178:	80 58       	subi	r24, 0x80	; 128
 17a:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_command>
 17e:	04 c0       	rjmp	.+8      	; 0x188 <lcd_putc+0x26>
 180:	61 e0       	ldi	r22, 0x01	; 1
 182:	8c 2f       	mov	r24, r28
 184:	0e 94 44 00 	call	0x88	; 0x88 <lcd_write>
 188:	cf 91       	pop	r28
 18a:	08 95       	ret

0000018c <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 18c:	cf 93       	push	r28
 18e:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 190:	50 9a       	sbi	0x0a, 0	; 10
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 192:	57 9a       	sbi	0x0a, 7	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 194:	51 9a       	sbi	0x0a, 1	; 10
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 196:	52 9a       	sbi	0x0a, 2	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 198:	53 9a       	sbi	0x0a, 3	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 19a:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 19c:	55 9a       	sbi	0x0a, 5	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19e:	8f e9       	ldi	r24, 0x9F	; 159
 1a0:	9f e0       	ldi	r25, 0x0F	; 15
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_init+0x16>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_init+0x1c>
 1a8:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 1aa:	5b 9a       	sbi	0x0b, 3	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 1ac:	5a 9a       	sbi	0x0b, 2	; 11
    lcd_e_toggle();
 1ae:	0e 94 40 00 	call	0x80	; 0x80 <toggle_e>
 1b2:	81 ee       	ldi	r24, 0xE1	; 225
 1b4:	94 e0       	ldi	r25, 0x04	; 4
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <lcd_init+0x2a>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <lcd_init+0x30>
 1bc:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1be:	0e 94 40 00 	call	0x80	; 0x80 <toggle_e>
 1c2:	95 e1       	ldi	r25, 0x15	; 21
 1c4:	9a 95       	dec	r25
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_init+0x38>
 1c8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1ca:	0e 94 40 00 	call	0x80	; 0x80 <toggle_e>
 1ce:	85 e1       	ldi	r24, 0x15	; 21
 1d0:	8a 95       	dec	r24
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcd_init+0x44>
 1d4:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 1d6:	5a 98       	cbi	0x0b, 2	; 11
    lcd_e_toggle();
 1d8:	0e 94 40 00 	call	0x80	; 0x80 <toggle_e>
 1dc:	95 e1       	ldi	r25, 0x15	; 21
 1de:	9a 95       	dec	r25
 1e0:	f1 f7       	brne	.-4      	; 0x1de <lcd_init+0x52>
 1e2:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 1e4:	88 e2       	ldi	r24, 0x28	; 40
 1e6:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 1ea:	88 e0       	ldi	r24, 0x08	; 8
 1ec:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 1f0:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 1f4:	86 e0       	ldi	r24, 0x06	; 6
 1f6:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 1fa:	8c 2f       	mov	r24, r28
 1fc:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_command>

}/* lcd_init */
 200:	cf 91       	pop	r28
 202:	08 95       	ret

00000204 <main>:

int main()
{
    // Write your code here
    
    PORTB = 0;
 204:	15 b8       	out	0x05, r1	; 5
    DDRB = (1<<0);
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	84 b9       	out	0x04, r24	; 4
    
    lcd_init(LCD_DISP_ON_CURSOR);
 20a:	8e e0       	ldi	r24, 0x0E	; 14
 20c:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_init>
    
    
    while (1){

        lcd_putc('S');
 210:	83 e5       	ldi	r24, 0x53	; 83
 212:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_putc>
        PORTB |= (1<<PORTB0);
 216:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 218:	2f e3       	ldi	r18, 0x3F	; 63
 21a:	8d e0       	ldi	r24, 0x0D	; 13
 21c:	93 e0       	ldi	r25, 0x03	; 3
 21e:	21 50       	subi	r18, 0x01	; 1
 220:	80 40       	sbci	r24, 0x00	; 0
 222:	90 40       	sbci	r25, 0x00	; 0
 224:	e1 f7       	brne	.-8      	; 0x21e <main+0x1a>
 226:	00 c0       	rjmp	.+0      	; 0x228 <main+0x24>
 228:	00 00       	nop
        _delay_ms(1000);
        PORTB &= ~(1<<PORTB0);
 22a:	28 98       	cbi	0x05, 0	; 5
 22c:	2f e3       	ldi	r18, 0x3F	; 63
 22e:	8d e0       	ldi	r24, 0x0D	; 13
 230:	93 e0       	ldi	r25, 0x03	; 3
 232:	21 50       	subi	r18, 0x01	; 1
 234:	80 40       	sbci	r24, 0x00	; 0
 236:	90 40       	sbci	r25, 0x00	; 0
 238:	e1 f7       	brne	.-8      	; 0x232 <main+0x2e>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <main+0x38>
 23c:	00 00       	nop
 23e:	e8 cf       	rjmp	.-48     	; 0x210 <main+0xc>

00000240 <_exit>:
 240:	f8 94       	cli

00000242 <__stop_program>:
 242:	ff cf       	rjmp	.-2      	; 0x242 <__stop_program>
