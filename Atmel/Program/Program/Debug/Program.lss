
Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00000598  0000062c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000598  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  00800130  00800130  0000065c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000068c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ce1  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000047d  00000000  00000000  0000149d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000092f  00000000  00000000  0000191a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  0000224c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000395  00000000  00000000  0000247c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006dc  00000000  00000000  00002811  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00002eed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 3c 02 	jmp	0x478	; 0x478 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e9       	ldi	r30, 0x98	; 152
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 33       	cpi	r26, 0x30	; 48
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e3       	ldi	r26, 0x30	; 48
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 37       	cpi	r26, 0x76	; 118
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 28 02 	call	0x450	; 0x450 <main>
  9e:	0c 94 ca 02 	jmp	0x594	; 0x594 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  a6:	59 9a       	sbi	0x0b, 1	; 11
  a8:	00 00       	nop
  aa:	59 98       	cbi	0x0b, 1	; 11
  ac:	08 95       	ret

000000ae <lcd_write>:
  ae:	cf 93       	push	r28
  b0:	c8 2f       	mov	r28, r24
  b2:	66 23       	and	r22, r22
  b4:	11 f0       	breq	.+4      	; 0xba <lcd_write+0xc>
  b6:	58 9a       	sbi	0x0b, 0	; 11
  b8:	01 c0       	rjmp	.+2      	; 0xbc <lcd_write+0xe>
  ba:	58 98       	cbi	0x0b, 0	; 11
  bc:	5f 98       	cbi	0x0b, 7	; 11
  be:	52 9a       	sbi	0x0a, 2	; 10
  c0:	53 9a       	sbi	0x0a, 3	; 10
  c2:	54 9a       	sbi	0x0a, 4	; 10
  c4:	55 9a       	sbi	0x0a, 5	; 10
  c6:	5d 98       	cbi	0x0b, 5	; 11
  c8:	5c 98       	cbi	0x0b, 4	; 11
  ca:	5b 98       	cbi	0x0b, 3	; 11
  cc:	5a 98       	cbi	0x0b, 2	; 11
  ce:	cc 23       	and	r28, r28
  d0:	0c f4       	brge	.+2      	; 0xd4 <lcd_write+0x26>
  d2:	5d 9a       	sbi	0x0b, 5	; 11
  d4:	c6 fd       	sbrc	r28, 6
  d6:	5c 9a       	sbi	0x0b, 4	; 11
  d8:	c5 fd       	sbrc	r28, 5
  da:	5b 9a       	sbi	0x0b, 3	; 11
  dc:	c4 fd       	sbrc	r28, 4
  de:	5a 9a       	sbi	0x0b, 2	; 11
  e0:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e4:	5d 98       	cbi	0x0b, 5	; 11
  e6:	5c 98       	cbi	0x0b, 4	; 11
  e8:	5b 98       	cbi	0x0b, 3	; 11
  ea:	5a 98       	cbi	0x0b, 2	; 11
  ec:	c3 fd       	sbrc	r28, 3
  ee:	5d 9a       	sbi	0x0b, 5	; 11
  f0:	c2 fd       	sbrc	r28, 2
  f2:	5c 9a       	sbi	0x0b, 4	; 11
  f4:	c1 fd       	sbrc	r28, 1
  f6:	5b 9a       	sbi	0x0b, 3	; 11
  f8:	c0 fd       	sbrc	r28, 0
  fa:	5a 9a       	sbi	0x0b, 2	; 11
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 100:	5a 9a       	sbi	0x0b, 2	; 11
 102:	5b 9a       	sbi	0x0b, 3	; 11
 104:	5c 9a       	sbi	0x0b, 4	; 11
 106:	5d 9a       	sbi	0x0b, 5	; 11
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <lcd_read>:
 10c:	88 23       	and	r24, r24
 10e:	11 f0       	breq	.+4      	; 0x114 <lcd_read+0x8>
 110:	58 9a       	sbi	0x0b, 0	; 11
 112:	01 c0       	rjmp	.+2      	; 0x116 <lcd_read+0xa>
 114:	58 98       	cbi	0x0b, 0	; 11
 116:	5f 9a       	sbi	0x0b, 7	; 11
 118:	52 98       	cbi	0x0a, 2	; 10
 11a:	53 98       	cbi	0x0a, 3	; 10
 11c:	54 98       	cbi	0x0a, 4	; 10
 11e:	55 98       	cbi	0x0a, 5	; 10
 120:	59 9a       	sbi	0x0b, 1	; 11
 122:	00 00       	nop
 124:	4a 9b       	sbis	0x09, 2	; 9
 126:	02 c0       	rjmp	.+4      	; 0x12c <lcd_read+0x20>
 128:	80 e1       	ldi	r24, 0x10	; 16
 12a:	01 c0       	rjmp	.+2      	; 0x12e <lcd_read+0x22>
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	4b 99       	sbic	0x09, 3	; 9
 130:	80 62       	ori	r24, 0x20	; 32
 132:	4c 99       	sbic	0x09, 4	; 9
 134:	80 64       	ori	r24, 0x40	; 64
 136:	4d 99       	sbic	0x09, 5	; 9
 138:	80 68       	ori	r24, 0x80	; 128
 13a:	59 98       	cbi	0x0b, 1	; 11
 13c:	00 00       	nop
 13e:	59 9a       	sbi	0x0b, 1	; 11
 140:	00 00       	nop
 142:	4a 99       	sbic	0x09, 2	; 9
 144:	81 60       	ori	r24, 0x01	; 1
 146:	4b 99       	sbic	0x09, 3	; 9
 148:	82 60       	ori	r24, 0x02	; 2
 14a:	4c 99       	sbic	0x09, 4	; 9
 14c:	84 60       	ori	r24, 0x04	; 4
 14e:	4d 99       	sbic	0x09, 5	; 9
 150:	88 60       	ori	r24, 0x08	; 8
 152:	59 98       	cbi	0x0b, 1	; 11
 154:	08 95       	ret

00000156 <lcd_waitbusy>:
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_read>
 15c:	88 23       	and	r24, r24
 15e:	dc f3       	brlt	.-10     	; 0x156 <lcd_waitbusy>
 160:	00 c0       	rjmp	.+0      	; 0x162 <lcd_waitbusy+0xc>
 162:	00 c0       	rjmp	.+0      	; 0x164 <lcd_waitbusy+0xe>
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_read>
 16a:	08 95       	ret

0000016c <lcd_command>:
 16c:	cf 93       	push	r28
 16e:	c8 2f       	mov	r28, r24
 170:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_waitbusy>
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	8c 2f       	mov	r24, r28
 178:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <lcd_gotoxy>:
 180:	61 11       	cpse	r22, r1
 182:	04 c0       	rjmp	.+8      	; 0x18c <lcd_gotoxy+0xc>
 184:	80 58       	subi	r24, 0x80	; 128
 186:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
 18a:	08 95       	ret
 18c:	80 54       	subi	r24, 0x40	; 64
 18e:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
 192:	08 95       	ret

00000194 <lcd_clrscr>:
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
 19a:	08 95       	ret

0000019c <lcd_home>:
 19c:	82 e0       	ldi	r24, 0x02	; 2
 19e:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
 1a2:	08 95       	ret

000001a4 <lcd_putc>:
 1a4:	cf 93       	push	r28
 1a6:	c8 2f       	mov	r28, r24
 1a8:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_waitbusy>
 1ac:	ca 30       	cpi	r28, 0x0A	; 10
 1ae:	49 f4       	brne	.+18     	; 0x1c2 <lcd_putc+0x1e>
 1b0:	80 34       	cpi	r24, 0x40	; 64
 1b2:	10 f0       	brcs	.+4      	; 0x1b8 <lcd_putc+0x14>
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <lcd_putc+0x16>
 1b8:	80 e4       	ldi	r24, 0x40	; 64
 1ba:	80 58       	subi	r24, 0x80	; 128
 1bc:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
 1c0:	04 c0       	rjmp	.+8      	; 0x1ca <lcd_putc+0x26>
 1c2:	61 e0       	ldi	r22, 0x01	; 1
 1c4:	8c 2f       	mov	r24, r28
 1c6:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <lcd_puts>:
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	ec 01       	movw	r28, r24
 1d4:	21 96       	adiw	r28, 0x01	; 1
 1d6:	fc 01       	movw	r30, r24
 1d8:	80 81       	ld	r24, Z
 1da:	88 23       	and	r24, r24
 1dc:	29 f0       	breq	.+10     	; 0x1e8 <lcd_puts+0x1a>
 1de:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_putc>
 1e2:	89 91       	ld	r24, Y+
 1e4:	81 11       	cpse	r24, r1
 1e6:	fb cf       	rjmp	.-10     	; 0x1de <lcd_puts+0x10>
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1ee:	cf 93       	push	r28
 1f0:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1f2:	50 9a       	sbi	0x0a, 0	; 10
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1f4:	57 9a       	sbi	0x0a, 7	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1f6:	51 9a       	sbi	0x0a, 1	; 10
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1f8:	52 9a       	sbi	0x0a, 2	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 1fa:	53 9a       	sbi	0x0a, 3	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 1fc:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 1fe:	55 9a       	sbi	0x0a, 5	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 200:	8f e9       	ldi	r24, 0x9F	; 159
 202:	9f e0       	ldi	r25, 0x0F	; 15
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <lcd_init+0x16>
 208:	00 c0       	rjmp	.+0      	; 0x20a <lcd_init+0x1c>
 20a:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 20c:	5b 9a       	sbi	0x0b, 3	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 20e:	5a 9a       	sbi	0x0b, 2	; 11
    lcd_e_toggle();
 210:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 214:	81 ee       	ldi	r24, 0xE1	; 225
 216:	94 e0       	ldi	r25, 0x04	; 4
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <lcd_init+0x2a>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <lcd_init+0x30>
 21e:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 220:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 224:	95 e1       	ldi	r25, 0x15	; 21
 226:	9a 95       	dec	r25
 228:	f1 f7       	brne	.-4      	; 0x226 <lcd_init+0x38>
 22a:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 22c:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 230:	85 e1       	ldi	r24, 0x15	; 21
 232:	8a 95       	dec	r24
 234:	f1 f7       	brne	.-4      	; 0x232 <lcd_init+0x44>
 236:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 238:	5a 98       	cbi	0x0b, 2	; 11
    lcd_e_toggle();
 23a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 23e:	95 e1       	ldi	r25, 0x15	; 21
 240:	9a 95       	dec	r25
 242:	f1 f7       	brne	.-4      	; 0x240 <lcd_init+0x52>
 244:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 246:	88 e2       	ldi	r24, 0x28	; 40
 248:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 24c:	88 e0       	ldi	r24, 0x08	; 8
 24e:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 252:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 256:	86 e0       	ldi	r24, 0x06	; 6
 258:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 25c:	8c 2f       	mov	r24, r28
 25e:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>

}/* lcd_init */
 262:	cf 91       	pop	r28
 264:	08 95       	ret

00000266 <update_led>:
                date.year--;
            }
    }
    update_display();
    return 1;
}
 266:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <date+0x21>
 26a:	85 b9       	out	0x05, r24	; 5
 26c:	08 95       	ret

0000026e <update_time>:
 26e:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <date>
 272:	81 11       	cpse	r24, r1
 274:	05 c0       	rjmp	.+10     	; 0x280 <update_time+0x12>
 276:	e3 e3       	ldi	r30, 0x33	; 51
 278:	f1 e0       	ldi	r31, 0x01	; 1
 27a:	83 85       	ldd	r24, Z+11	; 0x0b
 27c:	8f 5f       	subi	r24, 0xFF	; 255
 27e:	83 87       	std	Z+11, r24	; 0x0b
 280:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <date+0xb>
 284:	8c 33       	cpi	r24, 0x3C	; 60
 286:	31 f4       	brne	.+12     	; 0x294 <update_time+0x26>
 288:	e3 e3       	ldi	r30, 0x33	; 51
 28a:	f1 e0       	ldi	r31, 0x01	; 1
 28c:	13 86       	std	Z+11, r1	; 0x0b
 28e:	86 89       	ldd	r24, Z+22	; 0x16
 290:	8f 5f       	subi	r24, 0xFF	; 255
 292:	86 8b       	std	Z+22, r24	; 0x16
 294:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <date+0x16>
 298:	88 31       	cpi	r24, 0x18	; 24
 29a:	31 f4       	brne	.+12     	; 0x2a8 <update_time+0x3a>
 29c:	e3 e3       	ldi	r30, 0x33	; 51
 29e:	f1 e0       	ldi	r31, 0x01	; 1
 2a0:	16 8a       	std	Z+22, r1	; 0x16
 2a2:	81 a1       	ldd	r24, Z+33	; 0x21
 2a4:	8f 5f       	subi	r24, 0xFF	; 255
 2a6:	81 a3       	std	Z+33, r24	; 0x21
 2a8:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <date+0x21>
 2ac:	8f 31       	cpi	r24, 0x1F	; 31
 2ae:	21 f0       	breq	.+8      	; 0x2b8 <update_time+0x4a>
 2b0:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <date+0x2c>
 2b4:	8c 30       	cpi	r24, 0x0C	; 12
 2b6:	49 f0       	breq	.+18     	; 0x2ca <update_time+0x5c>
 2b8:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_clrscr>
 2bc:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_home>
 2c0:	82 e2       	ldi	r24, 0x22	; 34
 2c2:	91 e0       	ldi	r25, 0x01	; 1
 2c4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
 2c8:	ff cf       	rjmp	.-2      	; 0x2c8 <update_time+0x5a>
 2ca:	08 95       	ret

000002cc <update_display>:
 2cc:	0f 93       	push	r16
 2ce:	1f 93       	push	r17
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	cd b7       	in	r28, 0x3d	; 61
 2d6:	de b7       	in	r29, 0x3e	; 62
 2d8:	a0 97       	sbiw	r28, 0x20	; 32
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	f8 94       	cli
 2de:	de bf       	out	0x3e, r29	; 62
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	cd bf       	out	0x3d, r28	; 61
 2e4:	03 e3       	ldi	r16, 0x33	; 51
 2e6:	11 e0       	ldi	r17, 0x01	; 1
 2e8:	f8 01       	movw	r30, r16
 2ea:	80 81       	ld	r24, Z
 2ec:	4a e0       	ldi	r20, 0x0A	; 10
 2ee:	50 e0       	ldi	r21, 0x00	; 0
 2f0:	64 e3       	ldi	r22, 0x34	; 52
 2f2:	71 e0       	ldi	r23, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 8a 02 	call	0x514	; 0x514 <itoa>
 2fa:	f8 01       	movw	r30, r16
 2fc:	83 85       	ldd	r24, Z+11	; 0x0b
 2fe:	4a e0       	ldi	r20, 0x0A	; 10
 300:	50 e0       	ldi	r21, 0x00	; 0
 302:	6f e3       	ldi	r22, 0x3F	; 63
 304:	71 e0       	ldi	r23, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 8a 02 	call	0x514	; 0x514 <itoa>
 30c:	f8 01       	movw	r30, r16
 30e:	80 81       	ld	r24, Z
 310:	4a e0       	ldi	r20, 0x0A	; 10
 312:	50 e0       	ldi	r21, 0x00	; 0
 314:	6a e4       	ldi	r22, 0x4A	; 74
 316:	71 e0       	ldi	r23, 0x01	; 1
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 8a 02 	call	0x514	; 0x514 <itoa>
 31e:	f8 01       	movw	r30, r16
 320:	80 81       	ld	r24, Z
 322:	4a e0       	ldi	r20, 0x0A	; 10
 324:	50 e0       	ldi	r21, 0x00	; 0
 326:	65 e5       	ldi	r22, 0x55	; 85
 328:	71 e0       	ldi	r23, 0x01	; 1
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 8a 02 	call	0x514	; 0x514 <itoa>
 330:	f8 01       	movw	r30, r16
 332:	80 81       	ld	r24, Z
 334:	4a e0       	ldi	r20, 0x0A	; 10
 336:	50 e0       	ldi	r21, 0x00	; 0
 338:	60 e6       	ldi	r22, 0x60	; 96
 33a:	71 e0       	ldi	r23, 0x01	; 1
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	0e 94 8a 02 	call	0x514	; 0x514 <itoa>
 342:	f8 01       	movw	r30, r16
 344:	80 81       	ld	r24, Z
 346:	4a e0       	ldi	r20, 0x0A	; 10
 348:	50 e0       	ldi	r21, 0x00	; 0
 34a:	6c e6       	ldi	r22, 0x6C	; 108
 34c:	71 e0       	ldi	r23, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 8a 02 	call	0x514	; 0x514 <itoa>
 354:	80 e1       	ldi	r24, 0x10	; 16
 356:	e0 e0       	ldi	r30, 0x00	; 0
 358:	f1 e0       	ldi	r31, 0x01	; 1
 35a:	de 01       	movw	r26, r28
 35c:	11 96       	adiw	r26, 0x01	; 1
 35e:	01 90       	ld	r0, Z+
 360:	0d 92       	st	X+, r0
 362:	8a 95       	dec	r24
 364:	e1 f7       	brne	.-8      	; 0x35e <update_display+0x92>
 366:	80 e1       	ldi	r24, 0x10	; 16
 368:	e1 e1       	ldi	r30, 0x11	; 17
 36a:	f1 e0       	ldi	r31, 0x01	; 1
 36c:	de 01       	movw	r26, r28
 36e:	51 96       	adiw	r26, 0x11	; 17
 370:	01 90       	ld	r0, Z+
 372:	0d 92       	st	X+, r0
 374:	8a 95       	dec	r24
 376:	e1 f7       	brne	.-8      	; 0x370 <update_display+0xa4>
 378:	f8 01       	movw	r30, r16
 37a:	81 ad       	ldd	r24, Z+57	; 0x39
 37c:	8f 83       	std	Y+7, r24	; 0x07
 37e:	84 ad       	ldd	r24, Z+60	; 0x3c
 380:	8a 87       	std	Y+10, r24	; 0x0a
 382:	86 a5       	ldd	r24, Z+46	; 0x2e
 384:	8d 87       	std	Y+13, r24	; 0x0d
 386:	83 a1       	ldd	r24, Z+35	; 0x23
 388:	88 8b       	std	Y+16, r24	; 0x10
 38a:	87 89       	ldd	r24, Z+23	; 0x17
 38c:	88 87       	std	Y+8, r24	; 0x08
 38e:	80 8d       	ldd	r24, Z+24	; 0x18
 390:	89 87       	std	Y+9, r24	; 0x09
 392:	84 85       	ldd	r24, Z+12	; 0x0c
 394:	8b 87       	std	Y+11, r24	; 0x0b
 396:	85 85       	ldd	r24, Z+13	; 0x0d
 398:	8c 87       	std	Y+12, r24	; 0x0c
 39a:	81 81       	ldd	r24, Z+1	; 0x01
 39c:	8e 87       	std	Y+14, r24	; 0x0e
 39e:	82 81       	ldd	r24, Z+2	; 0x02
 3a0:	8f 87       	std	Y+15, r24	; 0x0f
 3a2:	60 e0       	ldi	r22, 0x00	; 0
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_gotoxy>
 3aa:	ce 01       	movw	r24, r28
 3ac:	01 96       	adiw	r24, 0x01	; 1
 3ae:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
 3b2:	61 e0       	ldi	r22, 0x01	; 1
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_gotoxy>
 3ba:	ce 01       	movw	r24, r28
 3bc:	41 96       	adiw	r24, 0x11	; 17
 3be:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_puts>
 3c2:	a0 96       	adiw	r28, 0x20	; 32
 3c4:	0f b6       	in	r0, 0x3f	; 63
 3c6:	f8 94       	cli
 3c8:	de bf       	out	0x3e, r29	; 62
 3ca:	0f be       	out	0x3f, r0	; 63
 3cc:	cd bf       	out	0x3d, r28	; 61
 3ce:	df 91       	pop	r29
 3d0:	cf 91       	pop	r28
 3d2:	1f 91       	pop	r17
 3d4:	0f 91       	pop	r16
 3d6:	08 95       	ret

000003d8 <timer_init>:

}

void timer_init(void) {

    TCCR1B |= (1<<WGM12); // Configure timer1 for CTC mode
 3d8:	e1 e8       	ldi	r30, 0x81	; 129
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	80 81       	ld	r24, Z
 3de:	88 60       	ori	r24, 0x08	; 8
 3e0:	80 83       	st	Z, r24
    TIMSK1 |= (1<<OCIE1A); // Interrupt enable
 3e2:	af e6       	ldi	r26, 0x6F	; 111
 3e4:	b0 e0       	ldi	r27, 0x00	; 0
 3e6:	8c 91       	ld	r24, X
 3e8:	82 60       	ori	r24, 0x02	; 2
 3ea:	8c 93       	st	X, r24
    // 1 0000 000 / 256 = 3 906.25
    // 65 535 / 3 906.25 = 9.09696
    // 65535 / 7204


    OCR1A = 31250; // Trigger interrupt when overflow
 3ec:	82 e1       	ldi	r24, 0x12	; 18
 3ee:	9a e7       	ldi	r25, 0x7A	; 122
 3f0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 3f4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TCCR1B |= (1<<CS12); // Prescaler = 256 to get a even number
 3f8:	80 81       	ld	r24, Z
 3fa:	84 60       	ori	r24, 0x04	; 4
 3fc:	80 83       	st	Z, r24

    sei();
 3fe:	78 94       	sei
 400:	08 95       	ret

00000402 <pin_interrupt_init>:
}

void pin_interrupt_init(void){

    EICRA |= (1<<ISC01); // Interrupt on falling edge
 402:	e9 e6       	ldi	r30, 0x69	; 105
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 81       	ld	r24, Z
 408:	82 60       	ori	r24, 0x02	; 2
 40a:	80 83       	st	Z, r24
    PCICR |= (PCIE1); // Enable interrupt on PCMSK0
 40c:	e8 e6       	ldi	r30, 0x68	; 104
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	80 81       	ld	r24, Z
 412:	81 60       	ori	r24, 0x01	; 1
 414:	80 83       	st	Z, r24
 416:	08 95       	ret

00000418 <system_init>:

}

void system_init(void){

    lcd_init(LCD_DISP_ON_CURSOR);
 418:	8e e0       	ldi	r24, 0x0E	; 14
 41a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_init>
    lcd_clrscr();
 41e:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_clrscr>
    timer_init();
 422:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <timer_init>
    pin_interrupt_init();
 426:	0e 94 01 02 	call	0x402	; 0x402 <pin_interrupt_init>

    PORTB = 0;
 42a:	15 b8       	out	0x05, r1	; 5
    DDRB = (1<<PORTB0) | (1<<PORTB1) | (1<<PORTB2) | (1<<PORTB3) | (1<<PORTB4) | (1<<PORTB5);
 42c:	8f e3       	ldi	r24, 0x3F	; 63
 42e:	84 b9       	out	0x04, r24	; 4

    date.day = 1;
 430:	e3 e3       	ldi	r30, 0x33	; 51
 432:	f1 e0       	ldi	r31, 0x01	; 1
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	81 a3       	std	Z+33, r24	; 0x21
    date.month = 12;
 438:	8c e0       	ldi	r24, 0x0C	; 12
 43a:	84 a7       	std	Z+44, r24	; 0x2c
    date.year = 2016;
 43c:	20 ee       	ldi	r18, 0xE0	; 224
 43e:	37 e0       	ldi	r19, 0x07	; 7
 440:	30 af       	std	Z+56, r19	; 0x38
 442:	27 ab       	std	Z+55, r18	; 0x37
    date.hour = 12;
 444:	86 8b       	std	Z+22, r24	; 0x16
    date.min = 0;
 446:	13 86       	std	Z+11, r1	; 0x0b
    date.sec = 0;
 448:	10 82       	st	Z, r1

    current_mode = 0;
 44a:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__data_end>
 44e:	08 95       	ret

00000450 <main>:
void pin_interrupt_init(void);
void update_display(void);

int main() {

    system_init();
 450:	0e 94 0c 02 	call	0x418	; 0x418 <system_init>
    uint8_t last_sec = date.sec;
 454:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <date>

    while (1) {
        if(last_sec != date.sec){
 458:	c3 e3       	ldi	r28, 0x33	; 51
 45a:	d1 e0       	ldi	r29, 0x01	; 1
 45c:	98 81       	ld	r25, Y
 45e:	98 17       	cp	r25, r24
 460:	f1 f3       	breq	.-4      	; 0x45e <main+0xe>
            lcd_putc('s');
 462:	83 e7       	ldi	r24, 0x73	; 115
 464:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_putc>
            update_time();
 468:	0e 94 37 01 	call	0x26e	; 0x26e <update_time>
            update_led();
 46c:	0e 94 33 01 	call	0x266	; 0x266 <update_led>
            update_display();
 470:	0e 94 66 01 	call	0x2cc	; 0x2cc <update_display>
            last_sec = date.sec;
 474:	88 81       	ld	r24, Y
 476:	f2 cf       	rjmp	.-28     	; 0x45c <main+0xc>

00000478 <__vector_11>:
    EICRA |= (1<<ISC01); // Interrupt on falling edge
    PCICR |= (PCIE1); // Enable interrupt on PCMSK0

}

ISR(TIMER1_COMPA_vect) {
 478:	1f 92       	push	r1
 47a:	0f 92       	push	r0
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	0f 92       	push	r0
 480:	11 24       	eor	r1, r1
 482:	8f 93       	push	r24
 484:	ef 93       	push	r30
 486:	ff 93       	push	r31
    date.sec++;
 488:	e3 e3       	ldi	r30, 0x33	; 51
 48a:	f1 e0       	ldi	r31, 0x01	; 1
 48c:	80 81       	ld	r24, Z
 48e:	8f 5f       	subi	r24, 0xFF	; 255
 490:	80 83       	st	Z, r24
    if( date.sec % 2 == 0){
 492:	80 fd       	sbrc	r24, 0
 494:	02 c0       	rjmp	.+4      	; 0x49a <__vector_11+0x22>
        PORTB |= (1<<PORTB5);
 496:	2d 9a       	sbi	0x05, 5	; 5
 498:	01 c0       	rjmp	.+2      	; 0x49c <__vector_11+0x24>
    } else {
        PORTB &= ~(1<<PORTB5);
 49a:	2d 98       	cbi	0x05, 5	; 5
    }
    if(date.sec >= 60) date.sec = 0;
 49c:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <date>
 4a0:	8c 33       	cpi	r24, 0x3C	; 60
 4a2:	10 f0       	brcs	.+4      	; 0x4a8 <__vector_11+0x30>
 4a4:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <date>
}
 4a8:	ff 91       	pop	r31
 4aa:	ef 91       	pop	r30
 4ac:	8f 91       	pop	r24
 4ae:	0f 90       	pop	r0
 4b0:	0f be       	out	0x3f, r0	; 63
 4b2:	0f 90       	pop	r0
 4b4:	1f 90       	pop	r1
 4b6:	18 95       	reti

000004b8 <__vector_3>:

ISR(PCINT0_vect){
 4b8:	1f 92       	push	r1
 4ba:	0f 92       	push	r0
 4bc:	0f b6       	in	r0, 0x3f	; 63
 4be:	0f 92       	push	r0
 4c0:	11 24       	eor	r1, r1
 4c2:	8f 93       	push	r24
    button_pressed = PCMSK0;
 4c4:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
 4c8:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <button_pressed>

    if(button_pressed & MODE ) {
 4cc:	80 ff       	sbrs	r24, 0
 4ce:	0d c0       	rjmp	.+26     	; 0x4ea <__vector_3+0x32>
        time_control |= MODE;
 4d0:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <time_control>
 4d4:	81 60       	ori	r24, 0x01	; 1
 4d6:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <time_control>
        if (current_mode <= 0){
 4da:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
 4de:	81 11       	cpse	r24, r1
 4e0:	13 c0       	rjmp	.+38     	; 0x508 <__vector_3+0x50>
            current_mode = 7;
 4e2:	87 e0       	ldi	r24, 0x07	; 7
 4e4:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
 4e8:	0f c0       	rjmp	.+30     	; 0x508 <__vector_3+0x50>
        }
    }
    else if ( button_pressed & PLUS ) {
 4ea:	81 ff       	sbrs	r24, 1
 4ec:	06 c0       	rjmp	.+12     	; 0x4fa <__vector_3+0x42>
        time_control |= PLUS;
 4ee:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <time_control>
 4f2:	82 60       	ori	r24, 0x02	; 2
 4f4:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <time_control>
 4f8:	07 c0       	rjmp	.+14     	; 0x508 <__vector_3+0x50>
    }
    else if ( button_pressed & MINUS ) {
 4fa:	82 ff       	sbrs	r24, 2
 4fc:	05 c0       	rjmp	.+10     	; 0x508 <__vector_3+0x50>
        time_control |= MINUS;
 4fe:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <time_control>
 502:	84 60       	ori	r24, 0x04	; 4
 504:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <time_control>
    }
}
 508:	8f 91       	pop	r24
 50a:	0f 90       	pop	r0
 50c:	0f be       	out	0x3f, r0	; 63
 50e:	0f 90       	pop	r0
 510:	1f 90       	pop	r1
 512:	18 95       	reti

00000514 <itoa>:
 514:	45 32       	cpi	r20, 0x25	; 37
 516:	51 05       	cpc	r21, r1
 518:	20 f4       	brcc	.+8      	; 0x522 <itoa+0xe>
 51a:	42 30       	cpi	r20, 0x02	; 2
 51c:	10 f0       	brcs	.+4      	; 0x522 <itoa+0xe>
 51e:	0c 94 95 02 	jmp	0x52a	; 0x52a <__itoa_ncheck>
 522:	fb 01       	movw	r30, r22
 524:	10 82       	st	Z, r1
 526:	cb 01       	movw	r24, r22
 528:	08 95       	ret

0000052a <__itoa_ncheck>:
 52a:	bb 27       	eor	r27, r27
 52c:	4a 30       	cpi	r20, 0x0A	; 10
 52e:	31 f4       	brne	.+12     	; 0x53c <__itoa_ncheck+0x12>
 530:	99 23       	and	r25, r25
 532:	22 f4       	brpl	.+8      	; 0x53c <__itoa_ncheck+0x12>
 534:	bd e2       	ldi	r27, 0x2D	; 45
 536:	90 95       	com	r25
 538:	81 95       	neg	r24
 53a:	9f 4f       	sbci	r25, 0xFF	; 255
 53c:	0c 94 a1 02 	jmp	0x542	; 0x542 <__utoa_common>

00000540 <__utoa_ncheck>:
 540:	bb 27       	eor	r27, r27

00000542 <__utoa_common>:
 542:	fb 01       	movw	r30, r22
 544:	55 27       	eor	r21, r21
 546:	aa 27       	eor	r26, r26
 548:	88 0f       	add	r24, r24
 54a:	99 1f       	adc	r25, r25
 54c:	aa 1f       	adc	r26, r26
 54e:	a4 17       	cp	r26, r20
 550:	10 f0       	brcs	.+4      	; 0x556 <__utoa_common+0x14>
 552:	a4 1b       	sub	r26, r20
 554:	83 95       	inc	r24
 556:	50 51       	subi	r21, 0x10	; 16
 558:	b9 f7       	brne	.-18     	; 0x548 <__utoa_common+0x6>
 55a:	a0 5d       	subi	r26, 0xD0	; 208
 55c:	aa 33       	cpi	r26, 0x3A	; 58
 55e:	08 f0       	brcs	.+2      	; 0x562 <__utoa_common+0x20>
 560:	a9 5d       	subi	r26, 0xD9	; 217
 562:	a1 93       	st	Z+, r26
 564:	00 97       	sbiw	r24, 0x00	; 0
 566:	79 f7       	brne	.-34     	; 0x546 <__utoa_common+0x4>
 568:	b1 11       	cpse	r27, r1
 56a:	b1 93       	st	Z+, r27
 56c:	11 92       	st	Z+, r1
 56e:	cb 01       	movw	r24, r22
 570:	0c 94 ba 02 	jmp	0x574	; 0x574 <strrev>

00000574 <strrev>:
 574:	dc 01       	movw	r26, r24
 576:	fc 01       	movw	r30, r24
 578:	67 2f       	mov	r22, r23
 57a:	71 91       	ld	r23, Z+
 57c:	77 23       	and	r23, r23
 57e:	e1 f7       	brne	.-8      	; 0x578 <strrev+0x4>
 580:	32 97       	sbiw	r30, 0x02	; 2
 582:	04 c0       	rjmp	.+8      	; 0x58c <strrev+0x18>
 584:	7c 91       	ld	r23, X
 586:	6d 93       	st	X+, r22
 588:	70 83       	st	Z, r23
 58a:	62 91       	ld	r22, -Z
 58c:	ae 17       	cp	r26, r30
 58e:	bf 07       	cpc	r27, r31
 590:	c8 f3       	brcs	.-14     	; 0x584 <strrev+0x10>
 592:	08 95       	ret

00000594 <_exit>:
 594:	f8 94       	cli

00000596 <__stop_program>:
 596:	ff cf       	rjmp	.-2      	; 0x596 <__stop_program>
